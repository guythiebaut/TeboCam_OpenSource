using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;

//order of processing
//get token
//loop
//if token is still valid get commands
//if token is not valid get token then get commands
//update status of particular command
//end loop

namespace TeboCam
{

    public static class Token
    {
        public static TokenResponse TokenForSession;
        public static List<CommandQueue> commands = new List<CommandQueue>();
    }

    public static class AuthenticationSuccess
    {
        public static bool Success;
    }

    public class RenewTokenObj
    {
        public string userName { get; set; }
        public string password { get; set; }
        public Boolean endpoints { get; set; }
        public Boolean commands { get; set; }
        public string application { get; set; }
        public string instance { get; set; }
    }

    public class EndpointResponse
    {
        public string endpointName { get; set; }
        public string url { get; set; }
    }

    public class CommandAvailable
    {
        public string display { get; set; }
        public string command { get; set; }
        public bool parms { get; set; }
    }

    public class ClearCommandObj
    {
        public string token { get; set; }
        public List<int> commandIdList { get; set; }
        public List<string> commandGuidList = new List<string>();
        public bool setAsRun { get; set; }
    }

    public class ClearCommandResponse
    {
        public List<int> commandIdList { get; set; }
    }

    public class TokenResponse
    {
        public string token { get; set; }
        public string validFrom { get; set; }
        public string validTo { get; set; }
        public string currentDateTime { get; set; }
        public List<EndpointResponse> endpoints { get; set; }
        public List<CommandAvailable> commands { get; set; }
    }

    public class TokenModel
    {
        public int idToken { get; set; }
        public int idUser { get; set; }
        public string application { get; set; }
        public string instance { get; set; }
        public string token { get; set; }
        public DateTime? validFrom { get; set; }
        public DateTime? validTo { get; set; }
    }

    public class InstanceSummaryInfoModel
    {
        public DateTime? updatedfromAppdtm { get; set; }
        public bool emailConfirmation { get; set; }
        public string currentState { get; set; }
    }

    public class InstanceSummaryUpdateModel
    {
        public string token { get; set; }
        public string currentState { get; set; }
        public bool emailConfirmation { get; set; }
    }

    public class ResponseWrapper
    {
        public bool TokenIsValid { get; set; }
        public TokenModel Token { get; set; }
        public object Package { get; set; }

        public ResponseWrapper WrapResponse<T>(T response)
        {
            Package = response;
            return this;
        }
    }

    public class CommandQueue
    {
        public int idCommandQueue { get; set; }
        public string commandGuid { get; set; }
        public int idUser { get; set; }
        public string application { get; set; }
        public string instance { get; set; }
        public string commandToRun { get; set; }
        public string parms { get; set; }
        public DateTime? requestedRunDtm { get; set; }
        public DateTime? commandRunDtm { get; set; }
        public DateTime? addedToQueueDtm { get; set; }
    }

    public static class API
    {
        static HttpClient client = new HttpClient();
        private const string BaseURI = "http://localhost:60125";//"http://www.teboweb.com";

        //RenewTokenObj requestObj = new RenewTokenObj() { endpoints = true, password = "", userName = "" };

        public static bool LogOn(string endpoint, string username, string password, string instance)
        {
            if (string.IsNullOrWhiteSpace(endpoint))
            {
                return false;
            }
            RenewTokenObj renewObj = new RenewTokenObj()
            {
                userName = username,
                password = password,
                application = "tebocam",
                commands = false,
                endpoints = true,
                instance = instance
            };

            Token.TokenForSession = GetTokenAsync(endpoint, renewObj).GetAwaiter().GetResult();
            return Token.TokenForSession.token != null;
        }
        public static async Task<TokenResponse> GetTokenAsync(string endpoint, RenewTokenObj renewTokenObj)
        {
            TokenResponse token = new TokenResponse();
            HttpResponseMessage response = await client.PostAsJsonAsync(endpoint, renewTokenObj);
            if (response.IsSuccessStatusCode)
            {
                token = await response.Content.ReadAsAsync<TokenResponse>();
            }

            return token;
        }

        public static InstanceSummaryInfoModel RetrieveInstance()
        {
            string endpoint = Token.TokenForSession.endpoints.First(x => x.endpointName == "getInstance").url;
            ResponseWrapper wrappedInstance = GetInstaSummaryAsync(Token.TokenForSession.token, endpoint).GetAwaiter().GetResult();
            AuthenticationSuccess.Success = wrappedInstance.TokenIsValid;
            return (InstanceSummaryInfoModel)wrappedInstance.Package;
        }
        public static async Task<ResponseWrapper> GetInstaSummaryAsync(string token, string instanceSummaryEndpoint)
        {
            ResponseWrapper instanceSummary = new ResponseWrapper();
            HttpResponseMessage response = await client.PostAsJsonAsync(instanceSummaryEndpoint, token);
            if (response.IsSuccessStatusCode)
            {
                instanceSummary = await response.Content.ReadAsAsync<ResponseWrapper>();
            }
            return instanceSummary;
        }

        public static InstanceSummaryInfoModel UpdateInstance(string status, bool emailConfirmation)
        {
            string endpoint = Token.TokenForSession.endpoints.First(x => x.endpointName == "updateInstance").url;

            InstanceSummaryUpdateModel summary = new InstanceSummaryUpdateModel
            {
                currentState = status,
                emailConfirmation = emailConfirmation,
                token = Token.TokenForSession.token
            };

            ResponseWrapper wrappedInstance = UpdateInstanceSummaryAsync(endpoint, summary).GetAwaiter().GetResult();
            AuthenticationSuccess.Success = wrappedInstance.TokenIsValid;
            return (InstanceSummaryInfoModel)wrappedInstance.Package;
        }
        public static async Task<ResponseWrapper> UpdateInstanceSummaryAsync(string instanceSummaryEndpoint, InstanceSummaryUpdateModel instanceSummaryUpdateModel)
        {
            ResponseWrapper instanceSummary = new ResponseWrapper();
            HttpResponseMessage response = await client.PostAsJsonAsync(instanceSummaryEndpoint, instanceSummaryUpdateModel);
            if (response.IsSuccessStatusCode)
            {
                instanceSummary = await response.Content.ReadAsAsync<ResponseWrapper>();
            }
            return instanceSummary;
        }

        public static bool RetrieveCommands(int number = 0)
        {
            string endpoint = BaseURI + Token.TokenForSession.endpoints.First(x => x.endpointName == "getCommand").url;
            ResponseWrapper wrappedCommands = GetCommandsAsync(Token.TokenForSession.token, number, endpoint).GetAwaiter().GetResult();
            var package = JsonConvert.DeserializeObject<List<CommandQueue>>(wrappedCommands.Package);

            Token.commands.AddRange((List<CommandQueue>)wrappedCommands.Package);
            AuthenticationSuccess.Success = wrappedCommands.TokenIsValid;
            return AuthenticationSuccess.Success;
        }
        public static async Task<ResponseWrapper> GetCommandsAsync(string token, int number, string getCommandsEndpoint)
        {
            string path = number > 0 ? $"{getCommandsEndpoint}?token={token}&number={number}" : $"{getCommandsEndpoint}/token={token}";
            ResponseWrapper commands = new ResponseWrapper();
            HttpResponseMessage response = await client.GetAsync(path);
            if (response.IsSuccessStatusCode) commands = await response.Content.ReadAsAsync<ResponseWrapper>();
            return commands;
        }

        public static void ClearCommands(List<int> ids)
        {
            string endpoint = Token.TokenForSession.endpoints.First(x => x.endpointName == "clearCommand").url;
            ClearCommandObj clear = new ClearCommandObj
            {
                token = Token.TokenForSession.token,
                commandIdList = ids,
                setAsRun = true
            };
            ResponseWrapper commandsCleared = ClearCommandAsync(clear, endpoint).GetAwaiter().GetResult();
            AuthenticationSuccess.Success = commandsCleared.TokenIsValid;
        }

        public static void ClearCommands(List<String> guids)
        {
            string endpoint = Token.TokenForSession.endpoints.First(x => x.endpointName == "clearCommand").url;
            ClearCommandObj clear = new ClearCommandObj
            {
                token = Token.TokenForSession.token,
                commandGuidList = guids,
                setAsRun = true
            };
            ResponseWrapper commandsCleared = ClearCommandAsync(clear, endpoint).GetAwaiter().GetResult();
            AuthenticationSuccess.Success = commandsCleared.TokenIsValid;
        }

        public static async Task<ResponseWrapper> ClearCommandAsync(ClearCommandObj clearCommandObj, string clearCommandEndpoint)
        {
            ResponseWrapper cleared = new ResponseWrapper();
            HttpResponseMessage response = await client.PostAsJsonAsync(clearCommandEndpoint, clearCommandObj);
            if (response.IsSuccessStatusCode) cleared = await response.Content.ReadAsAsync<ResponseWrapper>();
            return cleared;
        }
    }
}
