using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Collections;
using teboweb;
using Tiger.Video.VFW;
using System.Threading;
using System.IO;
using System.Diagnostics;
using TeboWeb;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using AForge.Video.DirectShow;
using AForge.Vision.Motion;
using System.Threading.Tasks;

enum enumCommandLine
{
    profile = 0,
    alert = 1,
    restart = 2,
    close = 3,
    none = 9
};

namespace TeboCam
{


    public delegate void formDelegate(ArrayList i);
    public delegate void formDelegateList(List<List<object>> i);
    public delegate void FilePrefixformDelegate(FilePrefixSettingsResultDto i);


    public partial class Preferences : Form
    {


        //http://msdn.microsoft.com/en-us/library/aa984408(v=vs.71).aspx
        System.Resources.ResourceManager resourceManager;

        public List<CameraButtonGroup> NotConnectedCameras = new List<CameraButtonGroup>();
        public List<CameraButtonGroup> PublishButtonGroupInstance = new List<CameraButtonGroup>();
        public CameraButtonsCntl ButtonCameraControl = new CameraButtonsCntl();
        public CameraButtonsCntl ButtonPublishControl = new CameraButtonsCntl();

        private Queue CommandQueue = new Queue();

        public CameraAlarm cameraAlarm;
        public Ping pinger;
        public Publisher publisher;
        public Pulse pulse;
        EmailHostSettingsCntl emailHostSettings;
        FtpSettingsCntl ftpSettings;
        EmailSettingsCntl emailSettings;
        AlertTimeSettingsCntl alertTimeSettings;
        NotificationSettingsCntl notificationSettings;
        ProfilesCntl profilesSettings;
        FreezeGuardCntl freezeGuardSettings;
        EmailIntelligenceCntl emailIntelligenceSettings;
        MovementStatisticsCntl movementStatisticsSettings;
        PublishSettingsCntl publishSettings;
        AlertFilenameCntl alertFilenameSettings;
        ImagesSavedFolderCntl imagesSavedFolderSettings;

        private bool connectedToInternet = false;

        public static event EventHandler pulseEvent;
        public static event EventHandler pulseStopEvent;
        public static event EventHandler pulseStartEvent;
        public static event EventHandler TimeChange;
        public static event ImagePub.ImagePubEventHandler pubPicture;

        public static event EventHandler publishSwitch;

        public delegate void ListPubEventHandler(object source, ListArgs e);
        public static event ListPubEventHandler statusUpdate;

        public Point CurrentTopLeft = new Point();
        public Point CurrentBottomRight = new Point();
        public int RectangleHeight = new int();
        public int RectangleWidth = new int();


        static BackgroundWorker bw = new BackgroundWorker();
        static BackgroundWorker cw = new BackgroundWorker();
        static BackgroundWorker worker = new BackgroundWorker();

        private bool showLevel = false;

        private int secondsToTrainStart;

        private const int statLength = 15;
        private int statIndex = 0;
        private int[] statCount = new int[statLength];

        private int intervalsToSave = 0;


        private AVIWriter writer = null;
        private bool saveOnMotion = false;

        public bool checkForMotion = false;

        public int frameCount;
        public int framePrevious = 0;

        private LevelControl LevelControlBox = new LevelControl();

        private FilterInfoCollection filters;

        public Graph graph = new Graph();
        private Log log = new Log();
        public IException tebowebException;
        private Configuration configuration = new Configuration();
        private bool Loading;
        private bool webcamAttached = false;
        private bool publishFirst = true;
        public const string tebowebUrl = sensitiveInfo.tebowebUrl;
        public const string versionDt = sensitiveInfo.versionDt;
        public static string version = Double.Parse(sensitiveInfo.ver, new System.Globalization.CultureInfo("en-GB")).ToString();
        public static bool devMachine = false;
        public static string postProcessCommand = "";
        public static bool updaterInstall = false;
        public static string processToEnd = sensitiveInfo.processToEnd;
        public static string postProcess = Application.StartupPath + @"\" + processToEnd + ".exe";
        public static string updater = Application.StartupPath + @"\update.exe";
        public static bool countingdownstop = false;
        public static bool countingdown = false;
        public static double newsSeq = 0;
        private IMail email = new mailOLD();
        public static bool keepWorking;
        public static bool lockdown = false;
        public static string devMachineFile = sensitiveInfo.devMachineFile;
        public static string databaseTrialFile = sensitiveInfo.databaseTrialFile;
        public static string ApiConnectFile = sensitiveInfo.dbaseConnectFile;
        public static string lastTime = "00:00";
        public static string upd_url = "";
        public static string upd_file = "";
        public static bool pulseRestart = false;

        [STAThread]

        static void Main()
        {
            Application.Run(new Preferences());
        }

        public Preferences()
        {
            InitializeComponent();
            resourceManager = new System.Resources.ResourceManager("tebocam.Preferences", this.GetType().Assembly);
        }

        private void testAtStart()
        {
            config.AddProfile();
            configApplication data = config.getProfile("main");
        }


        private void workerProcess(object sender, DoWorkEventArgs e)
        {
            pulseEvent -= new EventHandler(pulseProcess);
            pulseEvent += new EventHandler(pulseProcess);
            PulseEvents.pulseEvent -= new EventHandler(pulseProcess);
            PulseEvents.pulseEvent += new EventHandler(pulseProcess);
            Movement.pulseEvent -= new EventHandler(pulseProcess);
            Movement.pulseEvent += new EventHandler(pulseProcess);

            pulseStopEvent -= new EventHandler(pulseStop);
            pulseStopEvent += new EventHandler(pulseStop);
            pulseStartEvent -= new EventHandler(pulseStart);
            pulseStartEvent += new EventHandler(pulseStart);

            pulseEvent(null, new EventArgs());
            ApiProcess.mail = email;


            teboDebug.filePath = TebocamState.logFolder;
            teboDebug.fileName = "debug.txt";//string.Format("debug_{0}.txt", DateTime.Now.ToString("yyyyMMddHHmmss", System.Globalization.CultureInfo.InvariantCulture));

            teboDebug.openFile();

            teboDebug.writeline("workerProcess starting");

            long keepWorkingSequence = 0;

            cameraAlarm = new CameraAlarm(log, TebocamState.tebowebException,
                                          TebocamState.profileInUse, TebocamState.tmbPrefix,
                                          TebocamState.thumbFolder, Movement.moveStats);

            publisher = new Publisher(graph, TebocamState.tebowebException, email,
                       TebocamState.tmpFolder, TebocamState.tmbPrefix, TebocamState.thumbFolder,
                       TebocamState.imageFolder, TebocamState.xmlFolder, TebocamState.mosaicFile,
                       TebocamState.profileInUse, configuration, log,
                      Movement.moveStats, ImagePub.PubPicture);

            publisher.redrawGraph += new EventHandler(drawGraph);
            publisher.pulseEvent += new EventHandler(pulseProcess);

            pinger = new Ping(email, log, graph, TebocamState.tmpFolder,
                              TebocamState.xmlFolder, TebocamState.profileInUse, drawGraphPing);
            pinger.pulseEvent += new EventHandler(pulseProcess);
            pinger.redrawGraph += new EventHandler(drawGraph);
            cameraWindow.ping = pinger;

            while (keepWorking)
            {
                try
                {
                    if (keepWorkingSequence > 1000) keepWorkingSequence = 0;
                    keepWorkingSequence++;

                    pulseEvent(null, new EventArgs());
                    changeTheTime();

                    teboDebug.writeline("workerProcess calling CheckAndRunScheduledOperations");
                    CheckAndRunScheduledOperations();
                    teboDebug.writeline("workerProcess calling movementAddImages");
                    Movement.movementAddImages();
                    teboDebug.writeline("workerProcess calling publishImage");
                    publisher.publishImage();
                    teboDebug.writeline("workerProcess calling webUpdate");
                    ApiProcess.webUpdate(this);
                    teboDebug.writeline("workerProcess calling movementPublish");
                    publisher.movementPublish();

                    //we only really want to do the following every ten passes through this loop
                    if (keepWorkingSequence % 5 == 0) teboDebug.writeline("workerProcess calling ping");
                    if (keepWorkingSequence % 5 == 0) pinger.Send(webcamAttached, new Size(pictureBox1.ClientRectangle.Width, pictureBox1.ClientRectangle.Height));
                    if (keepWorkingSequence % 10 == 0)
                        teboDebug.writeline("workerProcess calling connectCamerasMissingAtStartup()");
                    if (keepWorkingSequence % 10 == 0) connectCamerasMissingAtStartup();
                    if (keepWorkingSequence % 10 == 0) teboDebug.writeline("workerProcess calling frameRate");
                    if (keepWorkingSequence % 10 == 0) frameRate();
                    if (keepWorkingSequence % 10 == 0) teboDebug.writeline("workerProcess calling cameraReconnectIfLost()");
                    if (keepWorkingSequence % 10 == 0) reconnectLostCameras();

                    teboDebug.writeline("workerProcess sleeping");
                    Thread.Sleep(250);
                }
                catch (Exception ex)
                {
                    TebocamState.tebowebException.LogException(ex);
                }
            }

            e.Cancel = true;
        }

        public static void changeTheTime()
        {
            string tmpStr = DateTime.Now.ToString("HH:mm", System.Globalization.CultureInfo.InvariantCulture);
            if (tmpStr != lastTime)
            {
                lastTime = tmpStr;
                TimeChange(null, new EventArgs());
            }
        }

        private void ButtonCameraDelegation(int id, Button cameraButton, Button activeButton, bool activate = false)
        {
            cameraSwitch(id, true, false);
        }
        private void ButtonPublishDelegation(int id, Button cameraButton, Button activeButton, bool activate = false)
        {
            pubcam(id);
        }

        private void ButtonActiveDelegation(int id, Button cameraButton, Button activeButton, bool activate)
        {
            selcam(id, activate);
        }

        private void filesInit()
        {
            if (!File.Exists(TebocamState.xmlFolder + "GraphData.xml"))
            {
                //FileManager.WriteFile("graphInit"); #FIX
                //FileManager.backupFile("graph");#FIX
                new Graph().WriteXMLFile(TebocamState.xmlFolder + "GraphData.xml", graph);
                new Graph().WriteXMLFile(TebocamState.xmlFolder + "GraphData.bak", graph);
            }

            if (!File.Exists(TebocamState.xmlFolder + "LogData" + ".xml"))
            {
                //FileManager.WriteFile("logInit");
                //FileManager.backupFile("log");
                new Log().WriteXMLFile(TebocamState.xmlFolder + "LogData" + ".xml", log);
                new Log().WriteXMLFile(TebocamState.xmlFolder + "LogData" + ".bak", log);
            }

            //if the old style config file exists read it otherwise deserialise file into class and delete the old config file
            FileManager.ConvertOldProfileIfExists(configuration);

            if (!File.Exists(TebocamState.xmlFolder + FileManager.configFile + ".xml"))
            {
                Configuration config = new Configuration();
                configApplication configApp = new configApplication();
                config.appConfigs.Add(configApp);
                config.WriteXmlFile(TebocamState.xmlFolder + FileManager.configFile + ".xml", configuration);
                config.WriteXmlFile(TebocamState.xmlFolder + FileManager.configFile + ".bak", configuration);
            }

        }

        private enumCommandLine commandLine()
        {

            //Example command line parameters
            // /alert now
            // /alert time 1935
            // /alert seconds 180
            // /profile daytime_monitor  
            //Example command line parameters

            enumCommandLine result = enumCommandLine.none;
            string commandLine = "";
            bool activate = false;
            bool restart = false;
            bool profile = false;
            bool time = false;
            bool seconds = false;
            bool acceptString = false;

            foreach (string arg in Environment.GetCommandLineArgs())
            {
                if (LeftRightMid.Left(arg, 1) == "/") { acceptString = true; }

                if (acceptString)
                {
                    commandLine = arg.ToLower().Trim();
                    //System.Diagnostics.Debug.WriteLine(arg);
                    //profile must not contain any spaces within it
                    //second time through pick up the profile to use
                    if (profile && config.profileExists(commandLine))
                    {
                        TebocamState.profileInUse = commandLine;
                        config.LoadCurrentProfile(commandLine);
                    }
                    //second time through pick up the profile to use
                    //profile must not contain any spaces within it

                    if (commandLine == "/profile")
                    {
                        profile = true;
                        result = enumCommandLine.profile;
                    }
                    if (commandLine == "/alert")
                    {
                        activate = true;
                        result = enumCommandLine.alert;
                    }
                    if (commandLine == "/restart")
                    {
                        result = enumCommandLine.restart;
                        restart = true;
                        pulseRestart = true;
                    }
                    if (commandLine == "/close")
                    {
                        result = enumCommandLine.close;
                        return result;
                    }

                    if (activate || profile)
                    {
                        config.GetCurrentProfile().countdownNow = false;
                        config.GetCurrentProfile().countdownTime = false;
                    }

                    if (activate && commandLine == "time") { time = true; }
                    if (activate && commandLine == "seconds") { seconds = true; }
                    if (activate && commandLine == "now") { config.GetCurrentProfile().countdownNow = true; }

                    if (time && commandLine != "time")
                    {
                        config.GetCurrentProfile().activatecountdownTime = commandLine;
                        config.GetCurrentProfile().countdownTime = true;
                        numericUpDown1.Value = Convert.ToDecimal(LeftRightMid.Left(commandLine, 2));
                        numericUpDown2.Value = Convert.ToDecimal(LeftRightMid.Right(commandLine, 2));
                        bttnNow.Checked = false;
                        bttnTime.Checked = true;
                        bttnSeconds.Checked = false;
                    }

                    if (seconds && commandLine != "seconds")
                    {
                        config.GetCurrentProfile().activatecountdown = Convert.ToInt32(commandLine);
                        actCountdown.Text = commandLine;
                        bttnNow.Checked = false;
                        bttnTime.Checked = false;
                        bttnSeconds.Checked = true;
                    }

                    if (restart && commandLine == "active")
                    {
                        config.GetCurrentProfile().activatecountdown = 30;
                        actCountdown.Text = "30";
                        bttnNow.Checked = false;
                        bttnTime.Checked = false;
                        bttnSeconds.Checked = true;
                        activate = true;
                    }

                    if ((activate && (commandLine == "now" || commandLine == "activate")))
                    {
                        bttnNow.Checked = true;
                        bttnTime.Checked = false;
                        bttnSeconds.Checked = false;
                    }
                }
            }

            if (activate)
            {
                config.GetCurrentProfile().AlertOnStartup = true;
                bttnMotionActive.Checked = true;

                Queue.QueueItem item = new Queue.QueueItem
                {
                    Instruction = "selcam",
                    Parms = new List<string> { "all" }
                };
                CommandQueue.QueueItems.Add(item);
            }

            return result;
        }

        private void InitialiseVars()
        {
            bttInstallUpdateAdmin.Visible = false;
            bttnUpdateFooter.Visible = false;
            Loading = true;
            string exceptionFileSuffix = DateTime.Now.ToString("yyyyMMddHHmmss", System.Globalization.CultureInfo.InvariantCulture);
            TebocamState.tebowebException = new TebowebException(TebocamState.exceptionFolder, $"TebowebException_{exceptionFileSuffix}.txt");
        }

        private void preferences_Load(object sender, EventArgs e)
        {
            StartPosition = FormStartPosition.Manual;
            installationClean();
            LevelControlBox.Left = 6;
            LevelControlBox.Top = 35;
            this.Webcam.Controls.Add(LevelControlBox);
            CameraRig.camSelInit();
            var publishCams = new Movement.publishCams(9);
            devMachine = File.Exists(Application.StartupPath + devMachineFile);
            ApiProcess.LicensedToConnectToApi = File.Exists(Application.StartupPath + ApiConnectFile);

            if (devMachine)
            {
                bttInstallUpdateAdmin.Visible = true;
                bttnUpdateFooter.Visible = true;
            }
            else
            {
                tabControl1.TabPages.Remove(Test);
            }

            if (!ApiProcess.LicensedToConnectToApi) tabControl1.TabPages.Remove(Online); ;

            var updaterPrefix = sensitiveInfo.updaterPrefix;
            update.updateMe(updaterPrefix, Application.StartupPath + @"\");
            ThumbsPrepare();
            InitialiseVars();

            try
            {
                log = new Log().ReadXMLFile(TebocamState.xmlFolder + "LogData" + ".xml");
                log.WriteXMLFile(TebocamState.xmlFolder + "LogData" + ".bak", log);
            }
            catch (Exception ex)
            {
                TebocamState.tebowebException.LogException(ex);
                log = new Log().ReadXMLFile(TebocamState.xmlFolder + "LogData" + ".bak");
            }

            TebocamState.log = log;
            Serialization.tebowebException = TebocamState.tebowebException;
            tebowebException = TebocamState.tebowebException;
            statistics.tebowebException = TebocamState.tebowebException;
            //cameraWindow.TebocamState.tebowebException = TebocamState.tebowebException;
            update.tebowebException = TebocamState.tebowebException;
            webdata.tebowebException = TebocamState.tebowebException;
            FileManager.tebowebException = TebocamState.tebowebException;
            LevelControlBox.tebowebException = TebocamState.tebowebException;
            ImageProcessor.tebowebException = TebocamState.tebowebException;
            email.SetExceptionHandler(tebowebException);
            LeftRightMid.tebowebException = TebocamState.tebowebException;
            ftp.tebowebException = TebocamState.tebowebException;
            graph.tebowebException = TebocamState.tebowebException;
            ImageThumbs.tebowebException = TebocamState.tebowebException;
            statusUpdate += new ListPubEventHandler(statusBarUpdate);
            log.LogAdded += new EventHandler(log_add);
            TimeChange += new EventHandler(time_change);
            publishSwitch += new EventHandler(publish_switch);
            Movement.motionLevelChanged += new EventHandler(drawLevel);
            Movement.motionDetectionActivate += new EventHandler(motionDetectionActivate);
            Movement.motionDetectionInactivate += new EventHandler(motionDetectionInactivate);
            filesInit();

            try
            {
                configuration = new Configuration().ReadXmlFile(TebocamState.xmlFolder + FileManager.configFile + ".xml");
                configuration.WriteXmlFile(TebocamState.xmlFolder + FileManager.configFile + ".bak", configuration);
            }
            catch (Exception ex)
            {
                TebocamState.tebowebException.LogException(ex);
                configuration = new Configuration().ReadXmlFile(TebocamState.xmlFolder + FileManager.configFile + ".bak");
            }

            if (configuration.appConfigs.Count == 0)
            {
                configApplication config = new configApplication();
                configuration.appConfigs.Add(config);
            }

            TebocamState.configuration = configuration;
            CameraRig.profiles = configuration.appConfigs;
            TebocamState.profileInUse = configuration.profileInUse;
            config.LoadCurrentProfile(configuration.profileInUse);
            newsSeq = configuration.newsSeq;
            PopulateTabsWithUserControls();
            profilesSettings.ProfileListRefresh(TebocamState.profileInUse);
            profilesSettings.ProfileListSelectFirst();
            connectedToInternet = Internet.internetConnected(config.GetCurrentProfile().internetCheck);
            notConnected.Visible = !connectedToInternet;

            try
            {
                graph = new Graph().ReadXMLFile(TebocamState.xmlFolder + "GraphData.xml");
            }
            catch (Exception ex)
            {
                try
                {
                    TebocamState.tebowebException.LogException(ex);
                    graph = new Graph().ReadXMLFile(TebocamState.xmlFolder + "GraphData.bak");
                }
                catch (Exception ex2)
                {
                    TebocamState.tebowebException.LogException(ex2);
                    new Graph().WriteXMLFile(TebocamState.xmlFolder + "GraphData.xml", graph);
                    new Graph().WriteXMLFile(TebocamState.xmlFolder + "GraphData.bak", graph);
                }
            }

            graph.WriteXMLFile(TebocamState.xmlFolder + "GraphData.bak", graph);

            //allows testing of movement detection
            //AdminControl();

            //clear out thumb nail images
            FileManager.clearFiles(TebocamState.thumbFolder);
            LevelControlBox.levelDraw(0);
            Movement.moveStatsInitialise();
            graph.updateGraphHist(time.currentDateYYYYMMDD(), Movement.moveStats);

            if (!config.GetCurrentProfile().captureMovementImages)
            {
                graphDate(DateTime.Now.ToString("yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture), "Image capture switched off");
            }
            else
            {
                DrawGraph();
            }

            //Apply command line values
            enumCommandLine commlineResults = commandLine();
            pnlStartupOptions.Visible = commlineResults <= enumCommandLine.alert;

            if (commlineResults == enumCommandLine.close)
            {
                CloseAllTeboCamPocesses();
                SetAPiInstanceToOff();
                return;
            }

            TebocamState.log.AddLine("Starting TeboCam");
            FileManager.clearLog();

            if (config.GetCurrentProfile().webcam != null)
            {
                cw.DoWork -= new DoWorkEventHandler(waitForCam);
                cw.DoWork += new DoWorkEventHandler(waitForCam);
                cw.WorkerSupportsCancellation = true;
                cw.RunWorkerAsync();
            }

            workInit(true);
            string test = time.currentTime();
            Loading = false;
            lblCurVer.Text += version;
            string onlineVersion = version;

#if !DEBUG
            updates(ref onlineVersion);
#endif

            if (config.GetCurrentProfile().logsKeepChk) clearOldLogs();

            if (!config.GetCurrentProfile().AlertOnStartup && config.GetCurrentProfile().updatesNotify
                && connectedToInternet
                && Convert.ToDecimal(onlineVersion) > Convert.ToDecimal(version)
                && !config.GetCurrentProfile().startTeboCamMinimized)
            {
                string tmpStr = "";

                //Name Spaces Required
                ////http://msdn.microsoft.com/en-us/library/aa984408(v=vs.71).aspx
                //System.Resources.ResourceManager resourceManager = new System.Resources.ResourceManager("tebocam.Preferences", this.GetType().Assembly);
                //tmpStr = resourceManager.GetString("updateAvailableMessage");

                //You do not have the most recent version available.

                //The most recent version can installed automatically
                //by clicking on the update button at the bottom of the screen 
                //or on the Admin tab.

                //To stop this message appearing in future uncheck the 
                //'Notify when updates are available' box in the Admin tab.
                tmpStr = "You do not have the most recent version available" + Environment.NewLine + Environment.NewLine;
                tmpStr += "This version: " + version + Environment.NewLine;
                tmpStr += "Most recent version available: " + onlineVersion + Environment.NewLine + Environment.NewLine;
                tmpStr += "The most recent version can be installed automatically" + Environment.NewLine;
                tmpStr += "by clicking on the update button at the bottom of the screen or on the Admin tab" + Environment.NewLine + Environment.NewLine + Environment.NewLine;
                tmpStr += "To stop this message appearing in future - uncheck the" + Environment.NewLine;
                tmpStr += "'Notify when updates are available' box in the Admin tab.";
                MessageBox.Show(tmpStr, "Update Available");
            }

            tabControl1.TabPages[0].Controls.Add(ButtonCameraControl);
            //this.Webcam.Controls.Add(ButtonCameraControl);
            ButtonCameraControl.Location = new Point(btnMonitor.Right + 2, btnMonitor.Top);
            ButtonCameraControl.BringToFront();
            publishSettings.GetGroupBox17().Controls.Add(ButtonPublishControl);
            ButtonPublishControl.Location = new Point(2, 10);
            ButtonPublishControl.BringToFront();
            this.Webcam.Invalidate();


            for (int i = 0; i < 9; i++)
            {
                ButtonCameraControl.AddButton(NotConnectedCameras, ButtonCameraDelegation, ButtonActiveDelegation, true, null);
                ButtonPublishControl.AddButton(PublishButtonGroupInstance, ButtonPublishDelegation, ButtonActiveDelegation, false, null);
            }

            notificationSettings.SetPlSnd(config.GetCurrentProfile().soundAlert != "");

            if (config.GetCurrentProfile().freezeGuard)
            {
                decimal intervalRatio = 1m / 0.75m;//gives a result of 1.33333...
                string restartCommand = bttnMotionActive.Checked ? "restart active" : "restart inactive";
                decimal checkInterval = config.GetCurrentProfile().pulseFreq / intervalRatio;

                pulse = new Pulse(config.GetCurrentProfile().pulseFreq,//1m,
                                  checkInterval,// 0.75m,
                                  TebocamState.tmpFolder,
                                  "pulse.xml",
                                  processToEnd,
                                  Application.StartupPath + @"\TeboCam.exe",
                                  TebocamState.pulseApp,
                                  TebocamState.logFolder,
                                  restartCommand,
                                  pulseRestart);

                pulse.tebowebException = TebocamState.tebowebException;
            }

            cw = null;
            keepWorking = true;

            worker.WorkerSupportsCancellation = true;
            worker.DoWork -= new DoWorkEventHandler(workerProcess);
            worker.DoWork += new DoWorkEventHandler(workerProcess);
            worker.RunWorkerAsync();

            this.Enabled = false;

            if (lockdown)
            {
                while (1 == 1)
                {
                    if (Prompt.ShowDialog("Password", "Enter password to unlock") == config.GetCurrentProfile().lockdownPassword)
                    {
                        this.Enabled = true;
                        break;
                    }
                }
            }

            this.Enabled = true;
        }

        void DrawGraph()
        {
            drawGraph(this, null);
        }

        void PopulateTabsWithUserControls()
        {
            AlertTimeSettings();
            EmailSettings();
            FtpSettings();
            EmailHostSettings();
            NotificationSettings();
            ProfilesSettings();
            FreezeGuardSettings();
            EmailIntelligenceSettings();
            MovementStatisticsSettings();
            PublishSettings();
            AlertFilenameSettings();
            ImagesSavedFolderSettings();
        }

        void NotificationSettings()
        {
            notificationSettings = new NotificationSettingsCntl(pinger,
                                                                configuration,
                                                                alertTimeSettings,
                                                                graphDate,
                                                                DrawGraph);
            Alerts.Controls.Add(notificationSettings);
            notificationSettings.Location = new Point(6, 6);
            notificationSettings.BringToFront();
        }

        void ImagesSavedFolderSettings()
        {
            imagesSavedFolderSettings = new ImagesSavedFolderCntl();
            Alerts.Controls.Add(imagesSavedFolderSettings);
            imagesSavedFolderSettings.Location = new Point(307, 122);
            imagesSavedFolderSettings.BringToFront();
        }

        void AlertFilenameSettings()
        {
            alertFilenameSettings = new AlertFilenameCntl(filePrefixSet);
            Alerts.Controls.Add(alertFilenameSettings);
            alertFilenameSettings.Location = new Point(307, 6);
            alertFilenameSettings.BringToFront();
        }

        void PublishSettings()
        {
            publishSettings = new PublishSettingsCntl(PublishButtonGroupInstance,
                                                      filePrefixSet,
                                                      scheduleSet,
                                                      publisher,
                                                      SetPublishFirst);
            Publish.Controls.Add(publishSettings);
            publishSettings.Location = new Point(3, 3);
            publishSettings.BringToFront();
        }

        void MovementStatisticsSettings()
        {
            movementStatisticsSettings = new MovementStatisticsCntl();
            Alerts.Controls.Add(movementStatisticsSettings);
            movementStatisticsSettings.Location = new Point(312, 409);
            movementStatisticsSettings.BringToFront();
        }

        void EmailIntelligenceSettings()
        {
            emailIntelligenceSettings = new EmailIntelligenceCntl();
            Alerts.Controls.Add(emailIntelligenceSettings);
            emailIntelligenceSettings.Location = new Point(312, 209);
            emailIntelligenceSettings.BringToFront();
        }

        void FreezeGuardSettings()
        {
            freezeGuardSettings = new FreezeGuardCntl(PulseStop);
            Admin.Controls.Add(freezeGuardSettings);
            freezeGuardSettings.Location = new Point(505, 146);
            freezeGuardSettings.BringToFront();
        }

        void ProfilesSettings()
        {
            profilesSettings = new ProfilesCntl(populateFromProfile,
                                                cameraNewProfile,
                                                saveChanges,
                                                configuration);
            Admin.Controls.Add(profilesSettings);
            profilesSettings.Location = new Point(505, 10);
            profilesSettings.BringToFront();
        }

        void AlertTimeSettings()
        {
            alertTimeSettings = new AlertTimeSettingsCntl();
            Alerts.Controls.Add(alertTimeSettings);
            alertTimeSettings.Location = new Point(6, 375);
            alertTimeSettings.BringToFront();
        }

        void EmailSettings()
        {
            emailSettings = new EmailSettingsCntl(email);
            Email_Ftp.Controls.Add(emailSettings);
            emailSettings.Location = new Point(376, 12);
            emailSettings.BringToFront();
        }

        void FtpSettings()
        {
            ftpSettings = new FtpSettingsCntl(TebocamState.log);
            Email_Ftp.Controls.Add(ftpSettings);
            ftpSettings.Location = new Point(23, 302);
            ftpSettings.BringToFront();
        }

        void EmailHostSettings()
        {
            emailHostSettings = new EmailHostSettingsCntl(email);
            Email_Ftp.Controls.Add(emailHostSettings);
            emailHostSettings.Location = new Point(23, 12);
            emailHostSettings.BringToFront();
        }

        void SetPublishFirst(bool val)
        {
            publishFirst = val;
        }

        private void workInit(bool start)
        {
            if (start)
            {
                pubPicture -= new ImagePub.ImagePubEventHandler(Publisher.take_picture_publish);
                pubPicture += new ImagePub.ImagePubEventHandler(Publisher.take_picture_publish);
            }
            else
            {
                keepWorking = false;
            }
        }

        private void updates(ref string onlineVersion)
        {
            List<string> updateDat = new List<string>();
            updateDat = check_for_updates();
            onlineVersion = Double.Parse(updateDat[1], new System.Globalization.CultureInfo("en-GB")).ToString();

            if (decimal.Parse(onlineVersion) == 0)
            { lblVerAvail.Text = "Unable to determine the most up-to-date version."; }
            else
            {
                if (decimal.Parse(version) >= decimal.Parse(onlineVersion))
                { lblVerAvail.Text = "You have the most up-to-date version."; }
                else
                {
                    lblVerAvail.Text = "Most recent version available: " + onlineVersion;
                    bttInstallUpdateAdmin.Visible = true;
                    bttnUpdateFooter.Visible = true;
                }

                upd_url = updateDat[2];
                upd_file = updateDat[3];
            }



            //pass the version of the update available to statusUpdate
            ListArgs a = new ListArgs();
            List<object> b = new List<object>();
            b.Add(onlineVersion);
            a.list = b;
            statusUpdate(null, a);
        }


        private void CloseAllTeboCamPocesses()
        {
            int myProcessID = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcesses();

            foreach (Process process in processes)
            {
                if (process.ProcessName == processToEnd && process.Id != myProcessID) process.Kill();
            }
        }


        private void preferences_Loaded(object sender, EventArgs e)
        {
            if (config.GetCurrentProfile().startTeboCamMinimized)
            {
                MinimiseTebocam(false);
            }
        }

        void PulseStop()
        {
            pulseStopEvent(null, new EventArgs());
        }

        private void pulseProcess(object sender, System.EventArgs e)
        {
            if (config.GetCurrentProfile().freezeGuard) pulse.Beat(bttnMotionActive.Checked ? "restart active" : "restart inactive");
        }

        private void pulseStop(object sender, System.EventArgs e)
        {
            pulse.StopPulse();
        }

        private void pulseStart(object sender, System.EventArgs e)
        {
            pulse.RestartPulse();
        }

        private void statusBarUpdate(object sender, ListArgs e)
        {
            if (Convert.ToDecimal(e._list[0]) > Convert.ToDecimal(version))
            {
                statusStrip.BackColor = Color.LemonChiffon;
                StatusStripLabel.ForeColor = Color.Black;
                StripStatusLabel.Text = "TeboCam - Version " + version + " - TeboWeb " + versionDt + " :::: Most recent version " + e._list[0].ToString() + " available as auto-install";
            }
            else
            {
                statusStrip.BackColor = System.Drawing.SystemColors.Control;
                StatusStripLabel.ForeColor = Color.Black;
                StripStatusLabel.Text = "TeboCam - Version " + version + " - Copyright TeboWeb " + versionDt;
            }
        }

        private void waitForCam(object sender, DoWorkEventArgs e)
        {
            bool nocam;
            //List<cameraSpecificInfo> expectedCameras = CameraRig.cameraCredentialsListedUnderProfile(TebocamState.profileInUse);
            var profile = configuration.appConfigs.Where(x => x.profileName == TebocamState.profileInUse).First();
            //*****************************
            //IP Webcams
            //*****************************

            //find if any webcams are present
            for (int i = 0; i < profile.camConfigs.Count; i++)
            {
                //we have an ip webcam in the profile
                if (profile.camConfigs[i].ipWebcamAddress != string.Empty)
                {
                    IPAddress parsedIpAddress;
                    Uri parsedUri;
                    //check that the url resolves
                    if (Uri.TryCreate(profile.camConfigs[i].ipWebcamAddress, UriKind.Absolute, out parsedUri) && IPAddress.TryParse(parsedUri.DnsSafeHost, out parsedIpAddress))
                    {
                        var pingSender = new System.Net.NetworkInformation.Ping();
                        PingReply reply = pingSender.Send(parsedIpAddress);
                        //is ip webcam running?
                        if (reply.Status == IPStatus.Success)
                        {
                            AForge.Video.MJPEGStream stream = new AForge.Video.MJPEGStream(profile.camConfigs[i].ipWebcamAddress);

                            if (profile.camConfigs[i].ipWebcamUser != string.Empty)
                            {
                                stream.Login = profile.camConfigs[i].ipWebcamUser;
                                stream.Password = profile.camConfigs[i].ipWebcamPassword;
                            }

                            Camera cam = OpenVideoSource(null, stream, true, -1);
                            cam.frameRateTrack = config.GetCurrentProfile().framerateTrack;

                        }
                    }
                }
            }

            //*****************************
            //IP Webcams
            //*****************************

            //*****************************
            //USB Webcams
            //*****************************
            nocam = false;

            try
            {
                filters = new FilterInfoCollection(FilterCategory.VideoInputDevice);
                if (filters.Count == 0) nocam = true;
            }
            catch (ApplicationException)
            {
                nocam = true;
            }


            //we have camera(s) attached so let's connect it/them
            if (!nocam)
            {
                for (int i = 0; i < filters.Count; i++)
                {
                    for (int c = 0; c < profile.camConfigs.Count; c++)
                    {
                        if (profile.camConfigs[c].ipWebcamAddress == string.Empty && filters[i].MonikerString == profile.camConfigs[c].webcam)
                        {
                            Thread.Sleep(1000);
                            VideoCaptureDevice localSource = new VideoCaptureDevice(profile.camConfigs[c].webcam);
                            Camera cam = OpenVideoSource(localSource, null, false, -1);
                            cam.frameRateTrack = config.GetCurrentProfile().framerateTrack;
                        }
                    }
                }
            }

            //*****************************
            //USB Webcams
            //*****************************

            CameraRig.ConnectedCameras.ForEach(x => x.cam.frameRateTrack = config.GetCurrentProfile().framerateTrack);
        }


        private List<string> check_for_updates()
        {
            List<string> updateDat = new List<string>();
            string versionFile = "";

            //set version file depending on machine installation
            if (!devMachine)
            {
                versionFile = sensitiveInfo.versionFile;
            }
            else
            {
                versionFile = sensitiveInfo.versionFileDev;
            }

            //get the update information into a List
            updateDat = update.getUpdateInfo(sensitiveInfo.downloadsURL, versionFile, TebocamState.resourceDownloadFolder, 1, true);

            if (updateDat == null)
            {
                //error in update
                List<string> err = new List<string>();
                err.Add("");
                err.Add("0");
                return err;
            }
            else
            {
                //download the news information file if a new one is available
                if (double.Parse(updateDat[4]) > newsSeq)
                {
                    update.installUpdateNow(updateDat[5], updateDat[6], TebocamState.resourceDownloadFolder, true);

                    try
                    {
                        //move all the unzipped files out of the download folder into the parent resource folder
                        //leave the zip file where it is to be deleted with the resource download folder
                        DirectoryInfo di = new DirectoryInfo(TebocamState.resourceDownloadFolder);
                        FileInfo[] files = di.GetFiles();

                        foreach (FileInfo fi in files)
                        {
                            if (fi.Name != updateDat[6])
                                File.Copy(TebocamState.resourceDownloadFolder + fi.Name, TebocamState.resourceFolder + fi.Name,
                                    true);
                        }

                        newsSeq = double.Parse(updateDat[4]);
                        configuration.newsSeq = double.Parse(updateDat[4]);
                        newsInfo.BackColor = Color.Gold;
                    }
                    catch (Exception e)
                    {
                        TebocamState.tebowebException.LogException(e);
                        return updateDat;
                    }

                    if (Directory.Exists(TebocamState.resourceDownloadFolder))
                    {
                        try
                        {
                            Directory.Delete(TebocamState.resourceDownloadFolder, true);
                        }
                        catch (Exception e)
                        {
                            TebocamState.tebowebException.LogException(e);
                            return updateDat;
                        }
                    }
                }
            }

            return updateDat;
        }

        #region camera_code

        private void button4_Click(object sender, EventArgs e)
        {
            OpenNewCamera();
        }

        private void OpenNewCamera()
        {
            string tmpStr = config.GetCurrentProfile().webcam;
            CaptureDeviceForm form = new CaptureDeviceForm(tmpStr, toolTip1.Active);

            if (form.ShowDialog(this) == DialogResult.OK)
            {
                if (form.Device.ipCam)
                {
                    IPAddress parsedIpAddress;
                    Uri parsedUri;

                    //check that the url resolves
                    if (Uri.TryCreate(form.Device.address, UriKind.Absolute, out parsedUri) && IPAddress.TryParse(parsedUri.DnsSafeHost, out parsedIpAddress))
                    {
                        var networkPinger = new System.Net.NetworkInformation.Ping();
                        PingReply reply = networkPinger.Send(parsedIpAddress);

                        //the ip webcam is running
                        if (reply.Status == IPStatus.Success)
                        {
                            config.InfoForProfileWebcam(TebocamState.profileInUse, form.Device.address).ipWebcamAddress = form.Device.address;
                            AForge.Video.MJPEGStream stream = new AForge.Video.MJPEGStream(form.Device.address);

                            if (form.Device.user != string.Empty)
                            {
                                stream.Login = form.Device.user;
                                stream.Password = form.Device.password;
                                config.InfoForProfileWebcam(TebocamState.profileInUse, form.Device.address).ipWebcamUser = form.Device.user;
                                config.InfoForProfileWebcam(TebocamState.profileInUse, form.Device.address).ipWebcamPassword = form.Device.password;
                                //new update examples
                                config.InfoForProfileWebcam(TebocamState.profileInUse, form.Device.address).ipWebcamUser = form.Device.user;
                                config.InfoForProfileWebcam(TebocamState.profileInUse, form.Device.address).ipWebcamPassword = form.Device.password;
                            }

                            Camera cam = OpenVideoSource(null, stream, true, -1);
                            cam.frameRateTrack = config.GetCurrentProfile().framerateTrack;
                        }
                        else
                        {
                            MessageBox.Show("The URL you have entered is not connecting to a webcam." + Environment.NewLine +
                                            "It may be that the webcam has not fully booted yet - it can take 1 minute on some webcams." + Environment.NewLine +
                                            "You may also have supplied an incorrect URL for the webcam.",
                                            "IP Webcam not detected", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
                        }
                    }
                    else
                    {
                        MessageBox.Show("The URL you have entered is not valid.", "Non Valid URL", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
                    }
                }
                else
                {
                    if (!CameraRig.camerasAlreadySelected(form.Device.address))
                    {
                        // create video source
                        VideoCaptureDevice localSource = new VideoCaptureDevice(form.Device.address);
                        // open camera
                        Camera cam = OpenVideoSource(localSource, null, false, -1);
                        cam.frameRateTrack = config.GetCurrentProfile().framerateTrack;
                    }
                }
            }
        }
        // Open video source
        //#ToDo check adding new cameras after removing
        private Camera OpenVideoSource(VideoCaptureDevice source, AForge.Video.MJPEGStream ipStream, Boolean ip,
            int cameraNo) //(VideoCaptureDevice source)
        {

            try
            {
                MotionDetector detector = new MotionDetector(new SimpleBackgroundModelingDetector());
                string camSource;

                // create camera
                Camera camera;

                if (!ip)
                {
                    camSource = source.Source;
                    camera = new Camera(source, detector, camSource);
                }
                else
                {
                    camSource = ipStream.Source;
                    camera = new Camera(ipStream, detector, camSource);
                }

                camera.tebowebException = TebocamState.tebowebException;
                camera.motionLevelEvent -= new motionLevelEventHandler(Movement.motionEvent);
                camera.motionLevelEvent += new motionLevelEventHandler(Movement.motionEvent);

                // start camera
                camera.Start();
                camera.ConnectedAt = DateTime.Now;
                var cameraExistsUnderProfile = configuration.appConfigs.First(x => x.profileName == TebocamState.profileInUse).camConfigs.Any(x => x.webcam == camSource);

                configWebcam configForWebcam;
                if (cameraExistsUnderProfile)
                {
                    configForWebcam = configuration.appConfigs.First(x => x.profileName == TebocamState.profileInUse).camConfigs.First(x => x.webcam == camSource);
                }
                else
                {
                    configForWebcam = new configWebcam();
                    configuration.appConfigs.First(x => x.profileName == TebocamState.profileInUse).camConfigs
                        .Add(configForWebcam);
                }

                var connectedCamera = new ConnectedCamera();
                CameraRig.ConnectedCameras.Add(connectedCamera);
                connectedCamera.cameraName = camSource;
                connectedCamera.friendlyName = configForWebcam.friendlyName;
                connectedCamera.cam = camera;
                connectedCamera.cam.camNo = cameraNo == -1 ? CameraRig.cameraCountZeroBased() : cameraNo;
                connectedCamera.cam.movementVal = configForWebcam.movementVal;
                configForWebcam.profileName = TebocamState.profileInUse;
                configForWebcam.webcam = camSource;
                connectedCamera.friendlyName = configForWebcam.friendlyName;
                connectedCamera.displayButton = configForWebcam.displayButton;
                connectedCamera.cam.areaDetectionWithin = configForWebcam.areaDetectionWithin;
                connectedCamera.cam.areaDetection = configForWebcam.areaDetection;
                connectedCamera.cam.rectX = configForWebcam.rectX;
                connectedCamera.cam.rectY = configForWebcam.rectY;
                connectedCamera.cam.rectHeight = configForWebcam.rectHeight;
                connectedCamera.cam.rectWidth = configForWebcam.rectWidth;
                connectedCamera.cam.movementVal = configForWebcam.movementVal;
                connectedCamera.cam.motionAlarm -= new alarmEventHandler(cameraAlarm.Alarm);
                connectedCamera.cam.motionAlarm += new alarmEventHandler(cameraAlarm.Alarm);

                CameraRig.CurrentlyDisplayingCamera = CameraRig.cameraCountZeroBased();
                config.GetCurrentProfile().webcam = camSource;

                Queue.QueueItem queueItem =
                    CommandQueue.QueueItems.FirstOrDefault(x => x.Instruction == "selcam" && x.Parms[0] == "all");
                if (queueItem != null && !queueItem.CamsProcessed.Contains(connectedCamera.cam.camNo))
                {
                    //selcam(connectedCamera.cam.camNo, true);
                    NotConnectedCameras.First(x => x.id == connectedCamera.displayButton).ActiveButtonIsActive();
                    CameraRig.ConnectedCameras[connectedCamera.cam.camNo].cam.alert = true;
                    CameraRig.ConnectedCameras[connectedCamera.cam.camNo].cam.alarmActive = true;
                    config.InfoForProfileWebcam(TebocamState.profileInUse,
                        CameraRig.ConnectedCameras[connectedCamera.cam.camNo].cameraName).alarmActive = true;
                    CameraRig.ConnectedCameras[connectedCamera.cam.camNo].cam.detectionOn = true;
                    //CameraRig.alert(true);
                    queueItem.CamsProcessed.Add(connectedCamera.cam.camNo);
                }

                //get desired button or first available button
                //int desiredButton = CameraRig.ConnectedCameras[newCameraIdx].displayButton;
                //check if the desxt frired button is free and return the next button if one is available

                var firstFreeButton = NotConnectedCameras.FirstOrDefault(x =>
                    x.CameraButtonState == CameraButtonGroup.ButtonState.NotConnected);
                int camButton = firstFreeButton != null ? firstFreeButton.id : 999;
                bool freeCamsExist = camButton != 999;

                //if a free camera button exists assign the camera
                if (freeCamsExist)
                {
                    connectedCamera.displayButton = camButton;
                }

                //update info for camera
                config.InfoForProfileWebcam(TebocamState.profileInUse, config.GetCurrentProfile().webcam)
                    .displayButton = camButton;

                camButtonSetColours();
                // the false refresh option is important here otherwise we get an exception thrown 
                //and any other commands from here are not executed
                cameraSwitch(camButton, false, false);
                CameraRig.alert(TebocamState.Alert.on);
                connectedCamera.cam.exposeArea = false;
                webcamAttached = true;
                btnConfigWebcam.SynchronisedInvoke(() => btnConfigWebcam.Enabled = CameraRig.camerasAreConnected());
                return camera;
            }
            catch (Exception ex)
            {
                TebocamState.tebowebException.LogException(ex);
                return null;
            }

        }

        //#todo record movie
        // On new frame
        private void camera_NewFrame(object sender, System.EventArgs e)
        {

            frameCount++;

            if ((intervalsToSave != 0) && (saveOnMotion == true))
            {

                //lets save the frame
                if (1 == 2)//writer == null)
                {
                    // create file name
                    DateTime date = DateTime.Now;
                    String fileName = String.Format("{0}-{1}-{2} {3}-{4}-{5}.avi", date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second);

                    try
                    {
                        // create AVI writer
                        writer = new AVIWriter("wmv3");
                        // open AVI file
                        writer.Open(@"C:\" + fileName, cameraWindow.Camera.Width, cameraWindow.Camera.Height);
                    }
                    catch (ApplicationException ex)
                    {
                        if (writer != null)
                        {
                            writer.Dispose();
                            writer = null;
                        }
                    }
                }

            }
        }

        #endregion

        private void DeleteImages()
        {
            ArrayList ftpFiles = ftp.GetFileList();

            if (MessageDialog.messageQuestionConfirm("Click on yes to delete all saved image files.", "Delete all TeboCam image files?") == DialogResult.Yes)
            {
                if (clrImg.Checked)
                {
                    try
                    {
                        foreach (Control ctrl in this.groupBox8.Controls)
                        {
                            if (ctrl is PictureBox)
                            {

                                ((PictureBox)(ctrl)).ImageLocation = "";
                                ((PictureBox)(ctrl)).Invalidate();
                            }
                        }

                        ImageThumbs.reset();
                    }
                    catch (Exception ex)
                    {
                        TebocamState.tebowebException.LogException(ex);
                    }

                    FileManager.clearFiles(TebocamState.thumbFolder);
                    FileManager.clearFiles(TebocamState.imageFolder);
                    lblAdminMes.Text = "Image computer files deleted";
                    TebocamState.log.AddLine("Image files on computer deleted.");
                }

                if (clrFtp.Checked)
                {
                    if (config.GetCurrentProfile().filenamePrefix.Trim() != "")
                    {
                        FileManager.InitialiseDeletionRegex(true);
                        FileManager.clearFtp();
                        lblAdminMes.Text = "Image web files deleted";
                    }
                    else
                    {
                        string tmpStr;
                        tmpStr = "No images deleted as the filename prefix is empty." + Environment.NewLine;
                        tmpStr += "Which means a risk of deleting the wrong files." + Environment.NewLine + Environment.NewLine;
                        tmpStr += "To remedy this ensure the filename prefix is populated";
                        MessageDialog.messageInform(tmpStr, "Cannot delete Website files");
                        TebocamState.log.AddLine("Cannot delete image files on website due to empty filename prefix.");
                    }
                }
            }
        }

        private void bttnClearAll_Click(object sender, EventArgs e)
        {
            DeleteImages();
        }

        private void activeCountdown(object sender, DoWorkEventArgs e)
        {

            //SetCheckBox(bttnMotionSchedule, false);
            bttnMotionSchedule.SynchronisedInvoke(() => bttnMotionSchedule.Checked = false);

            countingdown = true;
            int tmpInt = 0;
            int countdown = 0;
            int lastCount = 0;

            string tmpStr;

            //Time radio button is selected
            if (config.GetCurrentProfile().countdownTime)
            {

                int startTime = time.timeInSeconds(config.GetCurrentProfile().activatecountdownTime);
                int CurrTime = time.secondsSinceMidnight();

                if (CurrTime >= startTime)
                {
                    tmpStr = "0";
                }
                else
                {
                    tmpStr = Convert.ToString(startTime - CurrTime);
                }

            }
            else
            {
                //Now radio button is selected
                if (config.GetCurrentProfile().countdownNow)
                {
                    tmpStr = "0";
                }

                //Seconds radio button is selected
                else
                {
                    tmpStr = actCountdown.Text.Trim();
                }
            }


            if (Valid.IsNumeric(tmpStr))
            {
                countdown = Convert.ToInt32(tmpStr);
                actCount.SynchronisedInvoke(() => actCount.Text = Convert.ToString(countdown));
                //SetInfo(actCount, Convert.ToString(countdown));
            }

            tmpInt = countdown;
            lastCount = tmpInt;

            secondsToTrainStart = time.secondsSinceStart();

            if (tmpInt > 0)
            {
                TebocamState.log.AddLine("Motion countdown started: " + tmpInt.ToString() + " seconds until start.");
                txtMess.SynchronisedInvoke(() => txtMess.Text = "Counting Down...");
                //SetInfo(txtMess, "Counting Down...");
            }

            //This is the loop that checks on the countdown
            while (tmpInt > 0 && !countingdownstop)
            {
                tmpInt = countdown + ((int)secondsToTrainStart - time.secondsSinceStart());
                if (lastCount != tmpInt)
                {
                    actCount.SynchronisedInvoke(() => actCount.Text = Convert.ToString(tmpInt));
                    //SetInfo(actCount, Convert.ToString(tmpInt));
                    lastCount = tmpInt;
                }
                Thread.Sleep(500);//20100731 added to free up some processor time
            }
            //This is the loop that checks on the countdown

            actCount.SynchronisedInvoke(() => actCount.Text = string.Empty);
            //SetInfo(actCount, Convert.ToString(""));
            countingdown = false;
            if (!countingdownstop)
            {
                TebocamState.Alert.on = true;
                TebocamState.log.AddLine("Motion detection activated");
            }

            txtMess.SynchronisedInvoke(() => txtMess.Text = string.Empty);
            //SetInfo(txtMess, "");
            databaseUpdate(false);

        }

        private void databaseUpdate(bool off)
        {
            if (ApiProcess.apiCredentialsValidated)
            {
                if (off)
                {
                    API.UpdateInstance("Off", true);
                }
                else
                {
                    if (TebocamState.Alert.on)
                    {
                        API.UpdateInstance("Active", false);
                    }
                    else
                    {
                        API.UpdateInstance("Inactive", false);
                    }
                }
            }
        }

        private void bttnMotionActive_CheckedChanged(object sender, EventArgs e)
        {

            Movement.areaOffAtMotionInit();

            if (bttnMotionActive.Checked)
            {
                if (!countingdown)
                {

                    //about to go to active motion detection
                    //however no camera is selected as active
                    //so activate all cameras.
                    //as we could choose an incorrect camera.

                    if (!licence.aCameraIsSelected())
                    {
                        var availableCameraButtons = NotConnectedCameras.Where(x => x.CameraButtonState != CameraButtonGroup.ButtonState.ConnectedAndActive).ToList();
                        availableCameraButtons.ForEach(x => selcam(x.id, true));
                    }

                    actCount.Visible = true;
                    countingdownstop = false;
                    bool a = bw.IsBusy;
                    bw.DoWork -= new DoWorkEventHandler(activeCountdown);
                    bw.DoWork += new DoWorkEventHandler(activeCountdown);
                    bw.WorkerSupportsCancellation = true;
                    bw.RunWorkerAsync();
                }
            }
            else
            {
                //20130427 restored as the scheduleOnAtStart property now takes care of reactivating at start up
                //if (bttnMotionSchedule.Checked) SetCheckBox(bttnMotionSchedule, false);
                bttnMotionSchedule.SynchronisedInvoke(() => bttnMotionSchedule.Checked = false);

                countingdownstop = true;
                TebocamState.Alert.on = false;
                TebocamState.log.AddLine("Motion detection inactivated");
            }


        }




        // On add to log
        private void log_add(object sender, System.EventArgs e)
        {
            string msg = TebocamState.log.Lines.Last().Message;
            string dt = TebocamState.log.Lines.Last().DT.ToString("yyyy/MM/dd-HH:mm:ss:fff", System.Globalization.CultureInfo.InvariantCulture);
            txtLog.SynchronisedInvoke(() => txtLog.Text = string.Format("{0} [{1}]", msg, dt) + "\n" + txtLog.Text);
        }


        private void actCountdown_TextChanged(object sender, EventArgs e)
        {
            if (Valid.IsNumeric(actCountdown.Text))
            {
                config.GetCurrentProfile().activatecountdown = Convert.ToInt32(actCountdown.Text);
            }
            else
            {
                actCountdown.Text = "0";
                config.GetCurrentProfile().activatecountdown = 0;
            }
        }

        private void drawLevel(object sender, System.EventArgs e)
        {
            if (showLevel) LevelControlBox.levelDraw(Movement.motionLevel);
        }

        private void drawGraph(object sender, EventArgs e)
        {
            graphDate(DateTime.Now.ToString("yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture));
        }

        private void drawGraphPing(string pingGraphDate)
        {
            graphDate(pingGraphDate);
        }

        private void graphDate(string graphDate, string displayText = "")
        {
            Size size = new Size(pictureBox1.ClientRectangle.Width, pictureBox1.ClientRectangle.Height);
            GraphToDisplay.graphBitmap = graph.GetGraphFromDate(graphDate, size, TebocamState.tebowebException, displayText);
            GraphToSave.graphBitmap = (Bitmap)GraphToDisplay.graphBitmap.Clone();
            pictureBox1.Invalidate();
        }

        private void pictureBox1_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                Graphics graphicsObj = e.Graphics;

                if (GraphToDisplay.graphBitmap != null)
                {
                    Size imageSize = new Size();
                    lock (GraphToDisplay.graphBitmap)
                        imageSize = GraphToDisplay.graphBitmap.Size;

                    lock (GraphToDisplay.graphBitmap)
                        graphicsObj.DrawImage(GraphToDisplay.graphBitmap, 0, 0, imageSize.Width, imageSize.Height);
                }
            }
            catch (Exception ex)
            {
                TebocamState.tebowebException.LogException(ex);
            }
        }

        private void button6_Click(object sender, EventArgs e)
        {
            calendar_activate();
        }

        private void calendar_activate()
        {
            calendar.Visible = !calendar.Visible;

            if (calendar.Visible)
            {
                button6.Text = "Hide Calendar";
                ArrayList tmpList = graph.getGraphDates();

                foreach (string date in tmpList)
                {
                    calendar.AddBoldedDate(DateTime.ParseExact(date, "yyyyMMdd", null));
                }

                calendar.UpdateBoldedDates();
            }
            else
            {
                button6.Text = "Show Calendar";
            }
        }



        private void SetAPiInstanceToOff()
        {
            //https://dotnetcodr.com/2014/01/01/5-ways-to-start-a-task-in-net-c/
            //https://blogs.msdn.microsoft.com/benjaminperkins/2017/03/08/how-to-call-an-async-method-from-a-console-app-main-method/
            if (!ApiProcess.apiCredentialsValidated)
            {
                Task.Run(() => API.UpdateInstance("Off", true)).RunSynchronously();
            }
        }

        private void preferences_FormClosing(object sender, FormClosingEventArgs e)
        {
            SetAPiInstanceToOff();
            CloseTebocam();
        }

        private void CloseTebocam()
        {
            try
            {
                keepWorking = false;
                teboDebug.closeFile();
                tabControl1.SelectedIndex = 0;
                TebocamState.log.AddLine("Waiting for file processing to finish before exiting...");
                TebocamState.log.AddLine("Application will remain frozen until exit...");
                TebocamState.log.AddLine("Stopping TeboCam");

                if (bttnMotionActive.Checked
                    || bttnMotionAtStartup.Checked
                    || bttnActivateAtEveryStartup.Checked)
                {
                    TebocamState.Alert.on = true;
                }

                configuration.WriteXmlFile(TebocamState.xmlFolder + FileManager.configFile + ".xml", configuration);
                TebocamState.log.AddLine("Config data saved.");
                graph.WriteXMLFile(TebocamState.xmlFolder + "GraphData.xml", graph);
                TebocamState.log.AddLine("Graph data saved.");
                TebocamState.log.AddLine("Saving log data and closing.");
                log.WriteXMLFile(TebocamState.xmlFolder + "LogData" + ".xml", log);
                bttnMotionInactive.Checked = true;
                bttnMotionActive.Checked = false;
                bttnMotionAtStartup.Checked = false;
                workInit(false);
                closeAllCameras();
                TebocamState.log.AddLine("Application will remain frozen until exit.");
                Application.DoEvents();
                int secs = time.secondsSinceStart();
                if (config.GetCurrentProfile().freezeGuard) pulse.stopCheck(TebocamState.pulseProcessName);
                Thread.Sleep(6000);

                if (updaterInstall)
                {
                    TebocamState.log.AddLine("Preparing for installation...");
                    Application.DoEvents();
                    postProcessCommand = "profile " + TebocamState.profileInUse;
                    var destinationFolder = Application.StartupPath;

                    update.installUpdateRestart
                        (upd_url,
                        upd_file,
                        destinationFolder,
                        processToEnd,
                        postProcess,
                        postProcessCommand,
                        updater,
                        true,
                        "");
                }

            }
            catch (Exception ex)
            {
                TebocamState.tebowebException.LogException(ex);
            }
        }


        private void closeAllCameras()
        {
            foreach (ConnectedCamera rigI in CameraRig.ConnectedCameras)
            {
                Camera camera = rigI.cam;
                camera.SignalToStop();
                camera.WaitForStop();
            }

            if (writer != null)
            {
                writer.Dispose();
                writer = null;
            }

            intervalsToSave = 0;
        }

        private void calendar_DateSelected(object sender, DateRangeEventArgs e)
        {
            string dateSelected = calendar.SelectionStart.ToString("yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture);

            if (!config.GetCurrentProfile().captureMovementImages)
            {
                graphDate(dateSelected, "Image capture switched off");
                return;
            }

            if (graph.dataExistsForDate(dateSelected))
            {
                graphDate(dateSelected);
            }
            else
            {
                graphDate(null);
            }
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            while (TebocamState.fileBusy) { }
            mailOLD.emailTestOk = 9;

            var eml = new EmailFields()
            {
                SentBy = config.GetCurrentProfile().sentBy,
                SentByName = config.GetCurrentProfile().sentByName,
                SendTo = config.GetCurrentProfile().sendTo,
                Subject = "TeboCam Test",
                BodyText = "This is a test email from TeboCam",
                ReplyTo = config.GetCurrentProfile().replyTo,
                Attachments = false,
                CurrentTime = time.secondsSinceStart(),
                User = config.GetCurrentProfile().emailUser,
                Password = config.GetCurrentProfile().emailPass,
                SmtpHost = config.GetCurrentProfile().smtpHost,
                SmtpPort = config.GetCurrentProfile().smtpPort,
                EnableSsl = config.GetCurrentProfile().EnableSsl
            };

            email.sendEmail(eml);

            //huge code smell!!!
            while (mailOLD.emailTestOk == 9) { }
            //huge code smell!!!

            if (mailOLD.emailTestOk == 1)
            {
                MessageDialog.messageInform("It looks like the email test was successful", "Check your email");
            }
            else
            {
                MessageDialog.messageAlert("It looks like the email test was unsuccessful", "Check your email settings");
            }
            mailOLD.emailTestOk = 0;
        }

        private void numericUpDown2_ValueChanged(object sender, EventArgs e)
        {
            if (numericUpDown2.Value == 60) { numericUpDown2.Value = 0; }
            if (numericUpDown2.Value == -1) { numericUpDown2.Value = 59; }
            if (!Loading) { config.GetCurrentProfile().activatecountdownTime = numericUpDown1.Value.ToString().PadLeft(2, '0') + numericUpDown2.Value.ToString().PadLeft(2, '0'); }
        }

        private void numericUpDown1_ValueChanged(object sender, EventArgs e)
        {
            if (numericUpDown1.Value == 24) { numericUpDown1.Value = 0; }
            if (numericUpDown1.Value == -1) { numericUpDown1.Value = 23; }
            if (!Loading) { config.GetCurrentProfile().activatecountdownTime = numericUpDown1.Value.ToString().PadLeft(2, '0') + numericUpDown2.Value.ToString().PadLeft(2, '0'); }
        }

        private void bttnTime_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().countdownTime = bttnTime.Checked;
        }

        private void time_change(object sender, System.EventArgs e)
        {
            lblTime.SynchronisedInvoke(() => lblTime.Text = lastTime);
        }

        private void bttnNow_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().countdownNow = bttnNow.Checked;
        }

        private void updateNotify_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().updatesNotify = updateNotify.Checked;
        }

        private void openWebPageOLD(object sender, DoWorkEventArgs e)
        {
            Internet.openInternetBrowserAt(tebowebUrl);
        }

        private void ThumbsPrepare()
        {
            int tmpInt = 0;
            foreach (Control ctrl in this.groupBox8.Controls)
            {
                if (ctrl is PictureBox)
                {
                    ImageThumbs.thumbNames.Add(ctrl.Name);
                    tmpInt++;
                }
            }
            ImageThumbs.thumbNames.Sort();
            ImageThumbs.initPics(tmpInt);
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (tabControl1.SelectedIndex == 1)
            {
                updateThumbs();
            }
        }

        private void picWindow_ValueChanged(object sender, EventArgs e)
        {
            updateThumbs();
        }

        public void updateThumbs()
        {
            string[,] picsForWindow = ImageThumbs.populateWindow(picWindow.Value);
            bool picFound = false;

            foreach (Control ctrl in this.groupBox8.Controls)
            {
                picFound = false;
                if (ctrl is PictureBox)
                {
                    for (int i = 0; i < ImageThumbs.picsInWindowCount; i++)
                    {
                        if (ctrl.Name == picsForWindow[i, 0])
                        {
                            if (File.Exists(picsForWindow[i, 1]))
                            {
                                ((PictureBox)(ctrl)).ImageLocation = picsForWindow[i, 1];
                                picFound = true;
                                break;
                            }
                        }
                    }
                    if (!picFound) ((PictureBox)(ctrl)).ImageLocation = "";
                }
            }

        }

        private int imageFilesCount()
        {
            Int32 fileCount = 0;

            DirectoryInfo diA = new DirectoryInfo(TebocamState.imageFolder);
            FileInfo[] imageFilesA = diA.GetFiles("*" + TebocamState.ImgSuffix);
            fileCount += imageFilesA.Length;
            DirectoryInfo diB = new DirectoryInfo(TebocamState.thumbFolder);
            FileInfo[] imageFilesB = diB.GetFiles("*" + TebocamState.ImgSuffix);
            fileCount += imageFilesB.Length;

            return fileCount;
        }

        private int imageFilesCountWeb()
        {
            ArrayList webFiles = ftp.GetFileList();
            return webFiles.Count;
        }

        private void button7_Click(object sender, EventArgs e)
        {
            lblCountOnComputer.Text = "Computer: " + imageFilesCount().ToString();
            lblCountOnWeb.Text = "Website: " + imageFilesCountWeb().ToString();
            Invalidate();
        }

        private void installationClean()
        {
            FileManager.CreateDirIfNotExists(TebocamState.imageParentFolder);
            FileManager.CreateDirIfNotExists(TebocamState.imageFolder);
            FileManager.CreateDirIfNotExists(TebocamState.thumbFolder);
            FileManager.CreateDirIfNotExists(TebocamState.resourceFolder);
            FileManager.CreateDirIfNotExists(TebocamState.exceptionFolder);

            string configXml = TebocamState.xmlFolder + "config.xml";
            if (!Directory.Exists(TebocamState.vaultFolder) && File.Exists(configXml))
            {
                Directory.CreateDirectory(TebocamState.vaultFolder);
                string configVlt = TebocamState.vaultFolder + "config262.xml";
                if (!File.Exists(configVlt))
                {
                    File.Copy(configXml, configVlt, true);
                }
            }

            FileManager.CreateDirIfNotExists(TebocamState.tmpFolder);
            DirectoryInfo diTmp = new DirectoryInfo(TebocamState.tmpFolder);
            FileInfo[] imageFilesTmp = diTmp.GetFiles();
            foreach (FileInfo fi in imageFilesTmp)
            {
                File.Delete(fi.FullName);
            }

            FileManager.CreateDirIfNotExists(TebocamState.logFolder);

            if (!Directory.Exists(TebocamState.xmlFolder))
            {
                Directory.CreateDirectory(TebocamState.xmlFolder);
                DirectoryInfo diApp = new DirectoryInfo(Application.StartupPath);
                FileInfo[] xmlFilesApp = diApp.GetFiles("*.xml");
                foreach (FileInfo fi in xmlFilesApp)
                {
                    if (fi.FullName != "Ionic.Zip.xml") File.Move(fi.FullName, TebocamState.xmlFolder + fi.Name);
                }
            }

            if (File.Exists(TebocamState.xmlFolder + "processed.xml")) { File.Delete(TebocamState.xmlFolder + "processed.xml"); };
            if (File.Exists(Application.StartupPath + databaseTrialFile)) { File.Move(Application.StartupPath + databaseTrialFile, Application.StartupPath + ApiConnectFile); };
        }

        private void numericUpDown3_ValueChanged(object sender, EventArgs e)
        {
            if (numericUpDown3.Value >= numericUpDown4.Value) { numericUpDown4.Value = numericUpDown3.Value + 1; }
        }

        private void numericUpDown4_ValueChanged(object sender, EventArgs e)
        {
            if (numericUpDown4.Value <= numericUpDown3.Value) { numericUpDown4.Value = numericUpDown3.Value + 1; }
        }

        private void button9_Click(object sender, EventArgs e)
        {
            SaveFileDialog test = new SaveFileDialog();

            test.Title = "Save WebPage...";
            test.DefaultExt = "html";
            test.AddExtension = true;
            test.Filter = "html files (*.html)|*.html|All files (*.*)|*.*";
            test.FileName = "index";
            test.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            if (test.ShowDialog() == DialogResult.OK)
            {
                string tmpStr = test.FileName;
                webPage.writePage(config.GetCurrentProfile().filenamePrefix, TebocamState.ImgSuffix, Convert.ToInt32(numericUpDown3.Value), Convert.ToInt32(numericUpDown4.Value), tmpStr);
            }
        }

        private void populateFromProfile(string profileName)
        {
            configApplication data = config.getProfile(profileName);
            config.GetCurrentProfile().areaDetection = data.areaDetection;
            config.GetCurrentProfile().areaDetectionWithin = data.areaDetectionWithin;
            config.GetCurrentProfile().baselineVal = data.baselineVal;
            config.GetCurrentProfile().webcam = data.webcam;
            actCountdown.Text = data.activatecountdown.ToString();
            bool cmdLine = false;
            foreach (string arg in Environment.GetCommandLineArgs())
            {
                if (LeftRightMid.Left(arg, 1) == "/")
                {
                    cmdLine = true;
                    break;
                }
            }

            if (cmdLine)
            {
                bttnMotionActive.Checked = false;
                bttnMotionInactive.Checked = true;
            }
            else
            {
                bttnMotionActive.Checked = data.AlertOnStartup;
                bttnMotionInactive.Checked = !data.AlertOnStartup;
            }

            //maintain the order of bttnSeconds.Checked, bttnTime.Checked, bttnNow.Checked
            bttnSeconds.Checked = !data.countdownTime;
            bttnTime.Checked = data.countdownTime;
            bttnNow.Checked = data.countdownNow;
            //maintain the order of bttnSeconds.Checked, bttnTime.Checked, bttnNow.Checked

            //20101023 legacy code - cycleStamp replaced by cycleStampChecked
            if (data.cycleStamp) data.cycleStampChecked = 1;
            //20101023 legacy code - cycleStamp replaced by cycleStampChecked

            alertTimeSettings.SetEmailNotifInterval(data.emailNotifyInterval.ToString());
            txtLockdownPassword.Text = data.lockdownPassword;
            rdLockdownOn.Checked = data.lockdownOn;
            lockdown = data.lockdownOn;
            btnSecurityLockdownOn.Enabled = rdLockdownOn.Checked;

            alertTimeSettings.SetEmailImageFileInterval(data.imageSaveInterval.ToString());
            lblImgPref.Text = "Image Prefix: " + data.filenamePrefix + "   e.g " + data.filenamePrefix + "1" +
                              TebocamState.ImgSuffix;
            notificationSettings.SetLoadToFtp(data.loadImagesToFtp);
            notificationSettings.SetMaxImagesToEmail(data.maxImagesToEmail);
            numericUpDown1.Value = Convert.ToDecimal(LeftRightMid.Left(data.activatecountdownTime, 2));
            numericUpDown2.Value = Convert.ToDecimal(LeftRightMid.Right(data.activatecountdownTime, 2));
            publishSettings.SetPubTimerOn(data.timerOn);

            if (publishSettings.GetPubTimerOn().Checked)
            {
                publishSettings.SetLblstartpub(Color.Black);
                publishSettings.SetLblendpub(Color.Black);
            }
            else
            {
                publishSettings.SetLblstartpub(System.Drawing.SystemColors.Control);
                publishSettings.SetLblendpub(System.Drawing.SystemColors.Control);
            }

            bttnMotionSchedule.Checked = data.timerOnMov;
            bttnMotionScheduleOnAtStart.Checked = data.scheduleOnAtStart;

            //the schedule on at start box is checked so we set the schedule on if it is not on
            if (!data.timerOnMov && data.scheduleOnAtStart)
            {
                bttnMotionSchedule.Checked = true;
            }

            bttnActivateAtEveryStartup.Checked = data.activateAtEveryStartup;

            if (bttnMotionSchedule.Checked)
            {
                lblstartmov.ForeColor = Color.Black;
                lblendmov.ForeColor = Color.Black;
            }
            else
            {
                lblstartmov.ForeColor = System.Drawing.SystemColors.Control;
                lblendmov.ForeColor = System.Drawing.SystemColors.Control;
            }

            notificationSettings.SetPing(data.ping);
            notificationSettings.SetPingMins(data.pingInterval);

            if (data.sendThumbnailImages)
            {
                notificationSettings.SetSendThumb(data.sendThumbnailImages);
                notificationSettings.SetSendFullSize(data.sendFullSizeImages);
                notificationSettings.SetSendMosaic(data.sendMosaicImages);
            }
            else if (data.sendFullSizeImages)
            {
                notificationSettings.SetSendFullSize(data.sendFullSizeImages);
                notificationSettings.SetSendThumb(data.sendThumbnailImages);
                notificationSettings.SetSendMosaic(data.sendMosaicImages);
            }
            else if (data.sendMosaicImages)
            {
                notificationSettings.SetSendMosaic(data.sendMosaicImages);
                notificationSettings.SetSendFullSize(data.sendFullSizeImages);
                notificationSettings.SetSendThumb(data.sendThumbnailImages);
            }

            notificationSettings.SetMosaicImagesPerRow(data.mosaicImagesPerRow);
            notificationSettings.SetSendEmail(data.sendNotifyEmail);

            emailHostSettings.SetPassword(data.emailPass);
            emailHostSettings.SetUser(data.emailUser);
            emailHostSettings.SetHost(data.smtpHost);
            emailHostSettings.SetPort(data.smtpPort.ToString());
            emailHostSettings.SetSsl((bool)data.EnableSsl);

            ftpSettings.SetUser(data.ftpUser);
            ftpSettings.SetPassword(data.ftpPass);
            ftpSettings.SetRoot(data.ftpRoot);

            emailSettings.SetMailBody(data.mailBody);
            emailSettings.SetMailSubject(data.mailSubject);
            emailSettings.SetPingSubject(data.pingSubject);
            emailSettings.SetReplyTo(data.replyTo);
            emailSettings.SetSentBy(data.sentBy);
            emailSettings.SetSendTo(data.sendTo);
            emailSettings.SetSentByName(data.sentByName);

            updateNotify.Checked = data.updatesNotify;

            publishSettings.SetPubImage(data.pubImage);
            if (decimal.Parse(data.profileVersion) < 2.6m) //m forces number to be interpreted as decimal
            {
                data.publishWeb = data.pubImage;
            }

            publishSettings.SetPubFtpUser(data.pubFtpUser);
            publishSettings.SetPubFtpPass(data.pubFtpPass);
            publishSettings.SetPubFtpRoot(data.pubFtpRoot);

            if (data.motionLevel)
            {
                showLevel = true;
                levelShow.Image = TeboCam.Properties.Resources.nolevel;
            }
            else
            {
                showLevel = false;
                levelShow.Image = TeboCam.Properties.Resources.level;
                LevelControlBox.levelDraw(0);
            }

            LevelControlBox.Visible = showLevel;
            webUpd.Checked = data.webUpd;
            sqlUser.Text = data.webUser;
            sqlPwd.Text = data.webPass;
            sqlPoll.Text = data.webPoll.ToString();
            txtEndpoint.Text = data.AuthenticateEndpoint;
            txtEndpointLocal.Text = data.LocalAuthenticateEndpoint;
            if (!string.IsNullOrEmpty(data.AuthenticateEndpoint))
            {
                Uri uriRemote = new Uri(data.AuthenticateEndpoint);
                API.RemoteURI = uriRemote.Scheme + Uri.SchemeDelimiter + uriRemote.Authority;
            }

            if (!string.IsNullOrEmpty(data.LocalAuthenticateEndpoint))
            {
                Uri uriLocal = new Uri(data.LocalAuthenticateEndpoint);
                API.LocalURI = uriLocal.Scheme + Uri.SchemeDelimiter + uriLocal.Authority;
            }
            txtPickupDirectory.Text = data.PickupDirectory;
            rdApiRemote.Checked = data.UseRemoteEndpoint;
            rdApiLocal.Checked = !rdApiRemote.Checked;
            API.UseRemoteURI = rdApiRemote.Checked;
            sqlInstance.Text = data.webInstance;
            sqlImageRoot.Text = data.webImageRoot;
            sqlImageFilename.Text = data.webImageFileName;
            SqlFtpUser.Text = data.webFtpUser;
            SqlFtpPwd.Text = data.webFtpPass;

            //20101026 convert old publish timestamp to current object
            if (data.pubStamp) data.publishTimeStamp = true;
            if (data.pubStampDate) data.publishTimeStampFormat = "ddmmyy";
            if (data.pubStampTime) data.publishTimeStampFormat = "hhmm";
            if (data.pubStampDateTime) data.publishTimeStampFormat = "ddmmyyhhmm";
            if (data.pubStamp || data.pubStampDate || data.pubStampTime || data.pubStampDateTime)
            {
                data.publishTimeStampColour = "red";
                data.publishTimeStampPosition = "tl";
            }
            //20101026 convert old publish timestamp to current object

            emailIntelligenceSettings.SetEmailIntelOn(data.EmailIntelOn);
            emailIntelligenceSettings.SetEmailIntelEmails(data.emailIntelEmails);
            emailIntelligenceSettings.SetEmailIntelMins(data.emailIntelMins);
            emailIntelligenceSettings.SetEmailIntelStop(data.EmailIntelStop);
            emailIntelligenceSettings.SetEmailIntelMosaic(!data.EmailIntelStop);

            movementStatisticsSettings.SetRdStatsToFileOn(data.StatsToFileOn);
            movementStatisticsSettings.SetPnlStatsToFile(data.StatsToFileOn);
            movementStatisticsSettings.SetChkStatsToFileTimeStamp(data.StatsToFileTimeStamp);
            movementStatisticsSettings.SetTxtStatsToFileMb(data.StatsToFileMb);

            disCommOnline.Checked = data.disCommOnline;
            disCommOnlineSecs.Text = data.disCommOnlineSecs.ToString();
            disCommOnlineSecs.Enabled = disCommOnline.Checked;

            notificationSettings.SetPlSnd(data.soundAlertOn);
            logsKeep.Text = data.logsKeep.ToString();
            logsKeepChk.Checked = data.logsKeepChk;
            freezeGuardSettings.SetFreezeGuardOn(data.freezeGuard);
            freezeGuardSettings.SetFreezeGuardWindow(data.freezeGuardWindowShow);
            freezeGuardSettings.SetPulseFreq(data.pulseFreq.ToString());
            numFrameRateCalcOver.Value = data.framesSecsToCalcOver;
            chkFrameRateTrack.Checked = data.framerateTrack;
            chkHideWhenMinimised.Checked = data.hideWhenMinimized;
            imagesSavedFolderSettings.GetRadioButton11().Checked = data.imageLocCust;

            if (data.imageToframe)
            {
                imageInFrame.Image = TeboCam.Properties.Resources.arrowOut;
                cameraWindow.imageToFrame = true;
                panel1.AutoScroll = false;
            }
            else
            {
                imageInFrame.Image = TeboCam.Properties.Resources.arrowIn;
                cameraWindow.imageToFrame = false;
                panel1.AutoScroll = true;
            }

            if (data.cameraShow)
            {
                cameraWindow.showCam = true;
                cameraShow.Image = TeboCam.Properties.Resources.nolandscape;
            }
            else
            {
                cameraWindow.showCam = false;
                cameraShow.Image = TeboCam.Properties.Resources.landscape;
            }

            publishSettings.SetLblstartpub("Scheduled start: " + LeftRightMid.Left(data.timerStartPub, 2) + ":" + LeftRightMid.Right(data.timerStartPub, 2));
            publishSettings.SetLblendpub("Scheduled end: " + LeftRightMid.Left(data.timerEndPub, 2) + ":" + LeftRightMid.Right(data.timerEndPub, 2));
            lblstartmov.Text = "Start: " + LeftRightMid.Left(data.timerStartMov, 2) + ":" + LeftRightMid.Right(data.timerStartMov, 2);
            lblendmov.Text = "End: " + LeftRightMid.Left(data.timerEndMov, 2) + ":" + LeftRightMid.Right(data.timerEndMov, 2);
            notificationSettings.SetCaptureMovementImages(data.captureMovementImages);

            if (!data.captureMovementImages)
            {
                graphDate(DateTime.Now.ToString("yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture), "Image capture switched off");
            }

            txtInternetConnection.Text = data.internetCheck;

            if (!data.toolTips)
            { bttnToolTips.Text = "Turn ON Tool Tips"; }
            else
            { bttnToolTips.Text = "Turn OFF Tool Tips"; }

            toolTip1.Active = data.toolTips;
            startMinimized.Checked = data.startTeboCamMinimized;
            TebocamState.imageParentFolder = TebocamState.imageParentFolder = Application.StartupPath + @"\images\";
            TebocamState.imageFolder = TebocamState.imageParentFolder + @"fullSize\";
            TebocamState.thumbFolder = TebocamState.imageParentFolder + @"thumb\";

            if (imagesSavedFolderSettings.GetRadioButton11().Checked)
            {
                if (
                       Directory.Exists(config.GetCurrentProfile().imageParentFolderCust)
                    && Directory.Exists(config.GetCurrentProfile().imageFolderCust)
                    && Directory.Exists(config.GetCurrentProfile().thumbFolderCust)
                    )
                {

                    TebocamState.imageParentFolder = config.GetCurrentProfile().imageParentFolderCust;
                    TebocamState.imageFolder = config.GetCurrentProfile().imageFolderCust;
                    TebocamState.thumbFolder = config.GetCurrentProfile().thumbFolderCust;

                }
            }
            else
            {
                config.GetCurrentProfile().imageParentFolderCust = TebocamState.imageParentFolder;
                config.GetCurrentProfile().imageFolderCust = TebocamState.imageFolder;
                config.GetCurrentProfile().thumbFolderCust = TebocamState.thumbFolder;
            }
        }

        private void clearOldLogs()
        {
            int deleteDate = Convert.ToInt32(DateTime.Now.AddDays(-config.GetCurrentProfile().logsKeep).ToString("yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture));
            DirectoryInfo dInfo = new DirectoryInfo(TebocamState.logFolder);
            FileInfo[] logFiles = dInfo.GetFiles("log_" + "*.xml");
            int fileCount = logFiles.Length;

            foreach (FileInfo file in logFiles)
            {
                int fileDate = Convert.ToInt32(LeftRightMid.Mid(file.Name, 4, 8));
                if (fileDate < deleteDate) File.Delete(TebocamState.logFolder + file.Name);
            }
        }

        private void preferences_Resize(object sender, EventArgs e)
        {
            if (WindowState == FormWindowState.Minimized && config.GetCurrentProfile().hideWhenMinimized)
            {
                MinimiseTebocam(false);
            }
        }

        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ShowTebocam();
        }

        private void toolStripMenuItem2_Click(object sender, EventArgs e)
        {
            MinimiseTebocam(true);
        }


        private void MinimiseTebocam(bool hide)
        {
            WindowState = FormWindowState.Minimized;
            if (config.GetCurrentProfile().hideWhenMinimized || hide)
            {
                Hide();
            }
        }

        private void ShowTebocam()
        {
            WindowState = FormWindowState.Maximized;
            Show();
            this.BringToFront();
        }

        private void toolStripMenuItem3_Click(object sender, EventArgs e)
        {
            SetAPiInstanceToOff();
        }

        private void toolStripMenuItem5_Click(object sender, EventArgs e)
        {
            bttnMotionActive.Checked = true;
            bttnMotionInactive.Checked = false;
        }

        private void toolStripMenuItem4_Click(object sender, EventArgs e)
        {
            bttnMotionInactive.Checked = true;
            bttnMotionActive.Checked = false;
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            ShowTebocam();
        }

        private void hideLog_Click(object sender, EventArgs e)
        {
            if (txtLog.Visible)
            {
                txtLog.Visible = false;
                hideLog.Text = "Show Log";
            }
            else
            {
                txtLog.Visible = true;
                hideLog.Text = "Hide Log";
            }
        }

        private void pubImage_CheckedChanged(object sender, EventArgs e)
        {



        }

        private void pubTime_Leave(object sender, EventArgs e)
        {

        }

        private void pubHours_CheckedChanged(object sender, EventArgs e)
        {
        }

        private void pubMins_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void pubSecs_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void pubLocal_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void pubWeb_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void pubFtpUser_TextChanged(object sender, EventArgs e)
        {

        }

        private void pubFtpPass_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox2_TextChanged_1(object sender, EventArgs e)
        {

        }

        private void pubFtpCopy(object sender, EventArgs e)
        {

        }

        private void button5_Click_1(object sender, EventArgs e)
        {
            Internet.openInternetBrowserAt(tebowebUrl);
        }

        private void pubTimerOn_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void bttnMotionSchedule_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().timerOnMov = bttnMotionSchedule.Checked;

            if (bttnMotionSchedule.Checked)
            {
                lblstartmov.ForeColor = Color.Black;
                lblendmov.ForeColor = Color.Black;
            }
            else
            {
                lblstartmov.ForeColor = System.Drawing.SystemColors.Control;
                lblendmov.ForeColor = System.Drawing.SystemColors.Control;
            }
        }

        private void bttnMotionScheduleOnAtStart_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().scheduleOnAtStart = bttnMotionScheduleOnAtStart.Checked;
        }

        private void bttnActivateAtEveryStartup_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().activateAtEveryStartup = bttnActivateAtEveryStartup.Checked;
        }

        private scheduleClass.scheduleAction scheduleStart(string p_start, string p_end, bool currentlyActive)
        {
            //0 - do nothing
            //1 - start
            //2 - end

            int startTime = time.timeInSeconds(p_start);
            int endTime = time.timeInSeconds(p_end);
            int CurrTime = time.secondsSinceMidnight();
            scheduleClass.scheduleAction returnVal = scheduleClass.scheduleAction.no_action;
            bool zeroPassed = false;

            if (startTime < endTime)
            {
                //start 
                if (!currentlyActive && CurrTime >= startTime && CurrTime < endTime)
                {
                    returnVal = scheduleClass.scheduleAction.start;
                }

                //end 
                if (currentlyActive && (CurrTime >= endTime || CurrTime < startTime))
                {
                    returnVal = scheduleClass.scheduleAction.end;
                }
            }
            else
            {
                //start 
                if (!currentlyActive && CurrTime >= startTime)
                {
                    returnVal = scheduleClass.scheduleAction.start;
                    zeroPassed = false;
                }

                if (currentlyActive && CurrTime < startTime)
                {
                    zeroPassed = true;
                }

                //end 
                if (zeroPassed && CurrTime >= endTime)
                {
                    returnVal = scheduleClass.scheduleAction.end;
                    zeroPassed = false;

                }
            }
            return returnVal;
        }

        private void frameRate()
        {
            for (int i = 0; i < CameraRig.ConnectedCameras.Count(); i++)
            {
                List<Camera.FrameRateInfo> frameInfo = CameraRig.ConnectedCameras[i].cam.frames.framesInfo;

                if (frameInfo.Count == 0)
                {
                    lblFrameRate.SynchronisedInvoke(() => lblFrameRate.Text = "0");
                    CameraRig.ConnectedCameras[i].cam.FrameRateCalculated = 0;
                    return;
                }

                DateTime start = frameInfo.First().dateTime;
                DateTime end = frameInfo.Last().dateTime;
                int frames = frameInfo.Count;
                int secondsElapsed = (int)(end - start).TotalSeconds;
                int avgFrames = secondsElapsed > 0 ? frames / secondsElapsed : 0;
                CameraRig.ConnectedCameras[i].cam.FrameRateCalculated = avgFrames;
                CameraRig.ConnectedCameras[i].cam.frames.purge(config.GetCurrentProfile().framesSecsToCalcOver);
            }

            if (CameraRig.ConnectedCameras.Count > 0)
            {
                lblFrameRate.SynchronisedInvoke(() => lblFrameRate.Text = CameraRig.ConnectedCameras[CameraRig.CurrentlyDisplayingCamera].cam.FrameRateCalculated.ToString());
            }
        }

        private void reconnectLostCameras()
        {
            for (int i = CameraRig.ConnectedCameras.Count() - 1; i >= 0; i--)
            {
                ConnectedCamera camera = CameraRig.ConnectedCameras[i];

                //let's drop and reconnect cameras providing zero framerates 
                if (camera.cam.frameRateTrack &&
                    camera.cam.FrameRateCalculated == 0 &&
                    camera.cam.frames.LastFrameSecondsAgo() > 10 &&
                    (DateTime.Now - camera.cam.ConnectedAt).TotalSeconds > 10)
                {
                    //get the camera source name
                    //then see if camera is in the available sources
                    filters = new FilterInfoCollection(FilterCategory.VideoInputDevice);

                    foreach (FilterInfo filter in filters)
                    {
                        if (filter.MonikerString == camera.cameraName)
                        {
                            NotConnectedCameras.First(x => x.id == camera.displayButton).CameraButtonIsNotConnected();
                            int camNo = camera.cam.camNo;
                            string friendlyName = camera.friendlyName;
                            //drop the camera                 
                            CameraRig.cameraRemove(i, false);
                            //reconnect the camera
                            VideoCaptureDevice localSource = new VideoCaptureDevice(filter.MonikerString);
                            Camera cam = OpenVideoSource(localSource, null, false, camNo);
                            cam.frameRateTrack = config.GetCurrentProfile().framerateTrack;
                            TebocamState.log.AddLine(string.Format("Reconnecting lost [{0}] camera no. {1}.", friendlyName, cam.camNo.ToString()));
                            selcam(camNo, true);
                        }
                    }
                }
            }

        }

        private void connectCamerasMissingAtStartup()
        {
            //List<cameraSpecificInfo> expectedCameras = CameraRig.cameraCredentialsListedUnderProfile(TebocamState.profileInUse);
            var profile = configuration.appConfigs.Where(x => x.profileName == TebocamState.profileInUse).First();

            foreach (configWebcam expectedCamera in profile.camConfigs)
            {
                bool cameraConnected = CameraRig.ConnectedCameras.Any(x => x.cameraName == expectedCamera.webcam);
                if (!cameraConnected)
                {
                    bool cameraAvailable = false;
                    filters = new FilterInfoCollection(FilterCategory.VideoInputDevice);
                    foreach (FilterInfo filter in filters)
                    {
                        if (filter.MonikerString == expectedCamera.webcam)
                        {
                            cameraAvailable = true;
                            break;
                        }
                    }
                    if (cameraAvailable)
                    {
                        VideoCaptureDevice localSource = new VideoCaptureDevice(expectedCamera.webcam);
                        Camera cam = OpenVideoSource(localSource, null, false, -1);
                        cam.frameRateTrack = config.GetCurrentProfile().framerateTrack;
                        TebocamState.log.AddLine(string.Format("Connecting [{0}] camera not found at startup.", expectedCamera.friendlyName));
                        selcam(cam.camNo, true);
                    }
                }
            }
        }

        private void CheckAndRunScheduledOperations()
        {
            var checkScheduleResult = scheduleClass.scheduleAction.no_action;

            if (publishSettings.GetPubTimerOn().Checked)
            {
                checkScheduleResult = scheduleStart(config.GetCurrentProfile().timerStartPub,
                                                    config.GetCurrentProfile().timerEndPub,
                                                    publisher.keepPublishing);

                switch (checkScheduleResult)
                {
                    case scheduleClass.scheduleAction.start:
                        publishSwitch(null, new EventArgs());
                        TebocamState.log.AddLine("Web publish scheduled time start.");
                        break;
                    case scheduleClass.scheduleAction.end:
                        publishSwitch(null, new EventArgs());
                        TebocamState.log.AddLine("Web publish scheduled time end.");
                        break;
                }

            }

            if (bttnMotionSchedule.Checked)
            {
                checkScheduleResult = scheduleStart(config.GetCurrentProfile().timerStartMov,
                                                    config.GetCurrentProfile().timerEndMov,
                                                    TebocamState.Alert.on);

                switch (checkScheduleResult)
                {
                    case scheduleClass.scheduleAction.start:
                        motionDetectionActivate(null, new EventArgs());
                        TebocamState.log.AddLine("Motion active scheduled time start.");
                        break;
                    case scheduleClass.scheduleAction.end:
                        if (bttnMotionActive.Checked)
                        {
                            motionDetectionInactivate(null, new EventArgs());
                            TebocamState.log.AddLine("Motion active scheduled time end.");
                        }
                        break;
                }
            }
        }

        private void publish_switch(object sender, System.EventArgs e)
        {
            publishSettings.GetPubImage().SynchronisedInvoke(() => publishSettings.GetPubImage().Checked = !publisher.keepPublishing);
            publishSettings.GetPubTimerOn().SynchronisedInvoke(() => publishSettings.GetPubTimerOn().Checked = true);
            //SetCheckBox(pubImage, !TebocamState.keepPublishing);
            //SetCheckBox(pubTimerOn, true);
        }

        private void tabControl1_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            if (tabControl1.SelectedTab.Name == "Images")
            {
                updateThumbs();
                onlineVal.Enabled = ApiProcess.apiCredentialsValidated;
                rdOnlinejpg.Enabled = ApiProcess.apiCredentialsValidated;
                alertVal.Text = config.GetCurrentProfile().alertCompression.ToString();
                pingVal.Text = config.GetCurrentProfile().pingCompression.ToString();
                publishVal.Text = config.GetCurrentProfile().publishCompression.ToString();
                onlineVal.Text = config.GetCurrentProfile().onlineCompression.ToString();
            }
        }

        private void sqlUser_Leave(object sender, EventArgs e)
        {
            if (sqlUser.Text != config.GetCurrentProfile().webUser)
            {
                TebocamState.log.AddLine("API credentials user changed.");
                config.GetCurrentProfile().webUser = sqlUser.Text;
                ApiProcess.ApiAuthenticationAttemptCount = 0;
                ApiProcess.apiCredentialsValidated = false;
                ApiProcess.webUpdLastChecked = 0;
                ApiProcess.webFirstTimeThru = true;
            }
        }

        private void sqlPwd_Leave(object sender, EventArgs e)
        {
            if (sqlPwd.Text != config.GetCurrentProfile().webPass)
            {
                TebocamState.log.AddLine("API credentials password changed.");
                config.GetCurrentProfile().webPass = sqlPwd.Text;
                ApiProcess.ApiAuthenticationAttemptCount = 0;
                ApiProcess.apiCredentialsValidated = false;
                ApiProcess.webUpdLastChecked = 0;
                ApiProcess.webFirstTimeThru = true;

            }
        }

        private void motionDetectionActivate(object sender, System.EventArgs e)
        {
            //inactivate motion detection first in case a countdown is taking place
            bttnMotionInactive.SynchronisedInvoke(() => bttnMotionInactive.Checked = true);
            bttnMotionActive.SynchronisedInvoke(() => bttnMotionActive.Checked = false);

            Thread.Sleep(4000);

            //now activate motion detection
            bttnNow.SynchronisedInvoke(() => bttnNow.Checked = true);
            bttnTime.SynchronisedInvoke(() => bttnTime.Checked = false);
            bttnSeconds.SynchronisedInvoke(() => bttnSeconds.Checked = false);
            bttnMotionActive.SynchronisedInvoke(() => bttnMotionActive.Checked = true);
            bttnMotionInactive.SynchronisedInvoke(() => bttnMotionInactive.Checked = false);
        }

        private void motionDetectionInactivate(object sender, System.EventArgs e)
        {

            //20130427 restored as the scheduleOnAtStart property now takes care of reactivating at start up
            //if (bttnMotionSchedule.Checked) SetCheckBox(bttnMotionSchedule, false);
            if (bttnMotionSchedule.Checked) bttnMotionSchedule.SynchronisedInvoke(() => bttnMotionSchedule.Checked = false);

            bttnMotionInactive.SynchronisedInvoke(() => bttnMotionInactive.Checked = true);
            bttnMotionActive.SynchronisedInvoke(() => bttnMotionActive.Checked = false);
        }


        private void sqlPoll_Leave(object sender, EventArgs e)
        {
            int tmpInt = config.GetCurrentProfile().webPoll;
            sqlPoll.Text = Valid.verifyInt(sqlPoll.Text, 30, 9999, "30");

            if (Convert.ToInt32(sqlPoll.Text) != tmpInt)
            {
                config.GetCurrentProfile().webPoll = Convert.ToInt32(sqlPoll.Text);
                ApiProcess.webUpdLastChecked = 0;
                ApiProcess.webFirstTimeThru = true;
            }

        }

        private void sqlConString_Leave(object sender, EventArgs e)
        {
            config.GetCurrentProfile().AuthenticateEndpoint = txtEndpoint.Text.Trim();
        }

        private void txtEndpointLocal_Leave(object sender, EventArgs e)
        {
            config.GetCurrentProfile().LocalAuthenticateEndpoint = txtEndpointLocal.Text.Trim();
        }

        private void txtPickupDirectory_Leave(object sender, EventArgs e)
        {
            config.GetCurrentProfile().PickupDirectory = txtPickupDirectory.Text.Trim();
        }

        private void rdApiRemote_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().UseRemoteEndpoint = rdApiRemote.Checked;
        }

        private void webUpd_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().webUpd = webUpd.Checked;
            ApiProcess.webUpdLastChecked = 0;
            ApiProcess.webFirstTimeThru = true;
        }


        private ArrayList readTextFileintoArrayList(string file)
        {
            string line = null;
            ArrayList contents = new ArrayList();

            try
            {
                TextReader tr = new StreamReader(file);
                while ((line = tr.ReadLine()) != null) { contents.Add(line); }
                tr.Close();
                return contents;
            }
            catch (Exception e)
            {
                TebocamState.tebowebException.LogException(e);
                contents.Clear();
                contents.Add("Unable to retrieve information.");
                return contents;
            }
        }


        private void newsInfo_Click(object sender, EventArgs e)
        {
            ArrayList news = new ArrayList();
            ArrayList info = new ArrayList();
            ArrayList whatsNew = new ArrayList();
            ArrayList license = new ArrayList();
            license = readTextFileintoArrayList(TebocamState.resourceFolder + "license.txt");
            info = readTextFileintoArrayList(TebocamState.resourceFolder + "tebocaminfo.txt");
            news = readTextFileintoArrayList(TebocamState.resourceFolder + "tebocamnews.txt");
            whatsNew = readTextFileintoArrayList(TebocamState.resourceFolder + "tebocamwhatsnew.txt");
            newsInfo.BackColor = System.Drawing.SystemColors.Control;
            News form = new News(news, info, whatsNew, license);
            form.Show();
        }

        private void logsKeep_Leave(object sender, EventArgs e)
        {
            logsKeep.Text = Valid.verifyInt(logsKeep.Text, 1, 99999, "30");
            config.GetCurrentProfile().logsKeep = Convert.ToInt32(logsKeep.Text);
        }

        private void logsKeepChk_CheckedChanged_1(object sender, EventArgs e)
        {
            config.GetCurrentProfile().logsKeepChk = logsKeepChk.Checked;
        }

        private void sqlImageRoot_Leave(object sender, EventArgs e)
        {
            config.GetCurrentProfile().webImageRoot = sqlImageRoot.Text;
            ApiProcess.webFirstTimeThru = true;
        }

        private void sqlImageFilename_Leave(object sender, EventArgs e)
        {
            config.GetCurrentProfile().webImageFileName = sqlImageFilename.Text;
            ApiProcess.webFirstTimeThru = true;
        }

        private void sqlInstance_Leave(object sender, EventArgs e)
        {
            config.GetCurrentProfile().webInstance = sqlInstance.Text;
        }

        private void SqlFtpUser_Leave(object sender, EventArgs e)
        {
            config.GetCurrentProfile().webFtpUser = SqlFtpUser.Text;
            ApiProcess.webFirstTimeThru = true;
        }

        private void SqlFtpPwd_Leave(object sender, EventArgs e)
        {
            config.GetCurrentProfile().webFtpPass = SqlFtpPwd.Text;
            ApiProcess.webFirstTimeThru = true;
        }

        private void button20_Click(object sender, EventArgs e)
        {
            string tmpUser = "";
            string tmpPass = "";
            string tmpRoot = "";
            tmpUser = config.GetCurrentProfile().ftpUser;
            tmpPass = config.GetCurrentProfile().ftpPass;
            tmpRoot = config.GetCurrentProfile().ftpRoot;
            SqlFtpUser.Text = tmpUser;
            SqlFtpPwd.Text = tmpPass;
            sqlImageRoot.Text = tmpRoot;
            config.GetCurrentProfile().webFtpUser = tmpUser;
            config.GetCurrentProfile().webFtpPass = tmpPass;
            config.GetCurrentProfile().webImageRoot = tmpRoot;
        }

        private void radioButton11_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void customImageLocation_Click(object sender, EventArgs e)
        {

        }

        private void button24_Click(object sender, EventArgs e)
        {
            saveChanges();
        }

        private void saveChanges()
        {
            configuration.WriteXmlFile(TebocamState.xmlFolder + FileManager.configFile + ".xml", configuration);
            TebocamState.log.AddLine("Config data saved.");
        }

        private void startMinimized_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().startTeboCamMinimized = startMinimized.Checked;
        }

        private void txtInternetConnection_Leave(object sender, EventArgs e)
        {
            if (txtInternetConnection.Text.Trim() == "") txtInternetConnection.Text = "www.google.com";
            config.GetCurrentProfile().internetCheck = txtInternetConnection.Text;
        }

        private void bttnToolTips_Click_1(object sender, EventArgs e)
        {
            toolTip1.Active = !toolTip1.Active;

            if (!toolTip1.Active)
            { bttnToolTips.Text = "Turn ON Tool Tips"; }
            else
            { bttnToolTips.Text = "Turn OFF Tool Tips"; }

            config.GetCurrentProfile().toolTips = toolTip1.Active;
        }

        private void pictureBox1_DoubleClick(object sender, EventArgs e)
        {
            calendar_activate();
        }

        public static List<Control> controls(Control ctrl)
        {
            List<Control> controlList = new List<Control>();

            foreach (Control childControl in ctrl.Controls)
            {
                {
                    // Recurse child controls.
                    controlList.AddRange(controls(childControl));
                    controlList.Add(childControl);
                }
            }
            return controlList;
        }

        private void jPegSetCompression(ArrayList i)
        {

            if (i[0].ToString() == "Alert")
            {
                config.GetCurrentProfile().alertCompression = Convert.ToInt32(i[1].ToString());
                alertVal.SynchronisedInvoke(() => alertVal.Text = i[1].ToString());
            }

            if (i[0].ToString() == "Publish")
            {
                config.GetCurrentProfile().publishCompression = Convert.ToInt32(i[1].ToString());
                publishVal.SynchronisedInvoke(() => publishVal.Text = i[1].ToString());
            }

            if (i[0].ToString() == "Ping")
            {
                config.GetCurrentProfile().pingCompression = Convert.ToInt32(i[1].ToString());
                pingVal.SynchronisedInvoke(() => pingVal.Text = i[1].ToString());
            }

            if (i[0].ToString() == "Online")
            {
                config.GetCurrentProfile().onlineCompression = Convert.ToInt32(i[1].ToString());
                onlineVal.SynchronisedInvoke(() => onlineVal.Text = i[1].ToString());
            }

        }

        private void timeStampMth(List<List<object>> stampList)
        {
            foreach (List<object> item in stampList)
            {
                if (item[0].ToString() == "Online")
                {
                    config.GetCurrentProfile().onlineTimeStamp = Convert.ToBoolean(item[1]);
                    config.GetCurrentProfile().onlineTimeStampFormat = item[2].ToString();
                    config.GetCurrentProfile().onlineTimeStampColour = item[3].ToString();
                    config.GetCurrentProfile().onlineTimeStampPosition = item[4].ToString();
                    config.GetCurrentProfile().onlineTimeStampRect = Convert.ToBoolean(item[5]);
                    config.GetCurrentProfile().onlineStatsStamp = Convert.ToBoolean(item[7]);
                }

                if (item[0].ToString() == "Publish")
                {
                    config.GetCurrentProfile().publishTimeStamp = Convert.ToBoolean(item[1]);
                    config.GetCurrentProfile().publishTimeStampFormat = item[2].ToString();
                    config.GetCurrentProfile().publishTimeStampColour = item[3].ToString();
                    config.GetCurrentProfile().publishTimeStampPosition = item[4].ToString();
                    config.GetCurrentProfile().publishTimeStampRect = Convert.ToBoolean(item[5]);
                    config.GetCurrentProfile().publishStatsStamp = Convert.ToBoolean(item[7]);
                }

                if (item[0].ToString() == "Ping")
                {
                    config.GetCurrentProfile().pingTimeStamp = Convert.ToBoolean(item[1]);
                    config.GetCurrentProfile().pingTimeStampFormat = item[2].ToString();
                    config.GetCurrentProfile().pingTimeStampColour = item[3].ToString();
                    config.GetCurrentProfile().pingTimeStampPosition = item[4].ToString();
                    config.GetCurrentProfile().pingTimeStampRect = Convert.ToBoolean(item[5]);
                    config.GetCurrentProfile().pingStatsStamp = Convert.ToBoolean(item[7]);
                }

                if (item[0].ToString() == "Alert")
                {
                    config.GetCurrentProfile().alertTimeStamp = Convert.ToBoolean(item[1]);
                    config.GetCurrentProfile().alertTimeStampFormat = item[2].ToString();
                    config.GetCurrentProfile().alertTimeStampColour = item[3].ToString();
                    config.GetCurrentProfile().alertTimeStampPosition = item[4].ToString();
                    config.GetCurrentProfile().alertTimeStampRect = Convert.ToBoolean(item[5]);
                    config.GetCurrentProfile().alertStatsStamp = Convert.ToBoolean(item[7]);
                }
            }
        }

        private void timeStampMthOld(ArrayList i)
        {

            if (i[0].ToString() == "Online")
            {
                config.GetCurrentProfile().onlineTimeStamp = Convert.ToBoolean(i[1]);
                config.GetCurrentProfile().onlineTimeStampFormat = i[2].ToString();
                config.GetCurrentProfile().onlineTimeStampColour = i[3].ToString();
                config.GetCurrentProfile().onlineTimeStampPosition = i[4].ToString();
                config.GetCurrentProfile().onlineTimeStampRect = Convert.ToBoolean(i[5]);
                config.GetCurrentProfile().onlineStatsStamp = Convert.ToBoolean(i[6]);
            }

            if (i[0].ToString() == "Publish")
            {
                config.GetCurrentProfile().publishTimeStamp = Convert.ToBoolean(i[1]);
                config.GetCurrentProfile().publishTimeStampFormat = i[2].ToString();
                config.GetCurrentProfile().publishTimeStampColour = i[3].ToString();
                config.GetCurrentProfile().publishTimeStampPosition = i[4].ToString();
                config.GetCurrentProfile().publishTimeStampRect = Convert.ToBoolean(i[5]);
                config.GetCurrentProfile().publishStatsStamp = Convert.ToBoolean(i[6]);
            }

            if (i[0].ToString() == "Ping")
            {
                config.GetCurrentProfile().pingTimeStamp = Convert.ToBoolean(i[1]);
                config.GetCurrentProfile().pingTimeStampFormat = i[2].ToString();
                config.GetCurrentProfile().pingTimeStampColour = i[3].ToString();
                config.GetCurrentProfile().pingTimeStampPosition = i[4].ToString();
                config.GetCurrentProfile().pingTimeStampRect = Convert.ToBoolean(i[5]);
                config.GetCurrentProfile().pingStatsStamp = Convert.ToBoolean(i[6]);
            }

            if (i[0].ToString() == "Alert")
            {
                config.GetCurrentProfile().alertTimeStamp = Convert.ToBoolean(i[1]);
                config.GetCurrentProfile().alertTimeStampFormat = i[2].ToString();
                config.GetCurrentProfile().alertTimeStampColour = i[3].ToString();
                config.GetCurrentProfile().alertTimeStampPosition = i[4].ToString();
                config.GetCurrentProfile().alertTimeStampRect = Convert.ToBoolean(i[5]);
                config.GetCurrentProfile().alertStatsStamp = Convert.ToBoolean(i[6]);
            }

        }


        private void button16_Click_1(object sender, EventArgs e)
        {
            ArrayList i = new ArrayList();

            if (rdAlertjpg.Checked)
            {
                i.Add("Alert");
                i.Add(config.GetCurrentProfile().alertCompression);
            }
            if (rdPingjpg.Checked)
            {
                i.Add("Ping");
                i.Add(config.GetCurrentProfile().pingCompression);
            }
            if (rdPublishjpg.Checked)
            {
                i.Add("Publish");
                i.Add(config.GetCurrentProfile().publishCompression);
            }
            if (rdOnlinejpg.Checked)
            {
                i.Add("Online");
                i.Add(config.GetCurrentProfile().onlineCompression);
            }

            i.Add(config.GetCurrentProfile().toolTips);
            image image = new image(new formDelegate(jPegSetCompression), i);
            image.StartPosition = FormStartPosition.CenterScreen;
            image.ShowDialog();
        }

        private void button18_Click_1(object sender, EventArgs e)
        {
            List<List<object>> stampList = new List<List<object>>();
            List<object> alertList = new List<object>();
            List<object> pingList = new List<object>();
            List<object> publishList = new List<object>();
            List<object> onlineList = new List<object>();
            alertList.Add("Alert");
            alertList.Add(config.GetCurrentProfile().alertTimeStamp);
            alertList.Add(config.GetCurrentProfile().alertTimeStampFormat);
            alertList.Add(config.GetCurrentProfile().alertTimeStampColour);
            alertList.Add(config.GetCurrentProfile().alertTimeStampPosition);
            alertList.Add(config.GetCurrentProfile().alertTimeStampRect);
            alertList.Add(false);
            alertList.Add(config.GetCurrentProfile().alertStatsStamp);
            pingList.Add("Ping");
            pingList.Add(config.GetCurrentProfile().pingTimeStamp);
            pingList.Add(config.GetCurrentProfile().pingTimeStampFormat);
            pingList.Add(config.GetCurrentProfile().pingTimeStampColour);
            pingList.Add(config.GetCurrentProfile().pingTimeStampPosition);
            pingList.Add(config.GetCurrentProfile().pingTimeStampRect);
            pingList.Add(true);
            pingList.Add(config.GetCurrentProfile().pingStatsStamp);
            publishList.Add("Publish");
            publishList.Add(config.GetCurrentProfile().publishTimeStamp);
            publishList.Add(config.GetCurrentProfile().publishTimeStampFormat);
            publishList.Add(config.GetCurrentProfile().publishTimeStampColour);
            publishList.Add(config.GetCurrentProfile().publishTimeStampPosition);
            publishList.Add(config.GetCurrentProfile().publishTimeStampRect);
            publishList.Add(true);
            publishList.Add(config.GetCurrentProfile().publishStatsStamp);
            onlineList.Add("Online");
            onlineList.Add(config.GetCurrentProfile().onlineTimeStamp);
            onlineList.Add(config.GetCurrentProfile().onlineTimeStampFormat);
            onlineList.Add(config.GetCurrentProfile().onlineTimeStampColour);
            onlineList.Add(config.GetCurrentProfile().onlineTimeStampPosition);
            onlineList.Add(config.GetCurrentProfile().onlineTimeStampRect);
            onlineList.Add(false);
            onlineList.Add(config.GetCurrentProfile().onlineStatsStamp);
            stampList.Add(alertList);
            stampList.Add(pingList);
            stampList.Add(publishList);
            stampList.Add(onlineList);
            timestamp timestamp = new timestamp(new formDelegateList(timeStampMth), stampList);
            timestamp.StartPosition = FormStartPosition.CenterScreen;
            timestamp.ShowDialog();
        }

        private void cameraWindow_DoubleClick(object sender, EventArgs e)
        {
            if (!TebocamState.drawMode) imageInFrame_Click(this, null);
        }

        private void imageInFrame_Click(object sender, EventArgs e)
        {
            if (config.GetCurrentProfile().imageToframe)
            {
                imageInFrame.Image = TeboCam.Properties.Resources.arrowIn;
                config.GetCurrentProfile().imageToframe = false;
                cameraWindow.imageToFrame = false;
                panel1.AutoScroll = true;
            }
            else
            {
                imageInFrame.Image = TeboCam.Properties.Resources.arrowOut;
                config.GetCurrentProfile().imageToframe = true;
                cameraWindow.imageToFrame = true;
                panel1.AutoScroll = false;
            }
        }

        private void cameraShow_Click(object sender, EventArgs e)
        {
            cameraWindow.showCam = !cameraWindow.showCam;
            if (cameraWindow.showCam)
            {
                cameraShow.Image = TeboCam.Properties.Resources.nolandscape;
                config.GetCurrentProfile().cameraShow = true;
            }
            else
            {
                cameraShow.Image = TeboCam.Properties.Resources.landscape;
                config.GetCurrentProfile().cameraShow = false;
            }
        }

        private void levelShow_Click(object sender, EventArgs e)
        {
            if (!showLevel)
            {
                showLevel = true;
                levelShow.Image = TeboCam.Properties.Resources.nolevel;
            }
            else
            {
                showLevel = false;
                levelShow.Image = TeboCam.Properties.Resources.level;
                LevelControlBox.levelDraw(0);
            }

            config.GetCurrentProfile().motionLevel = showLevel;
            LevelControlBox.Visible = showLevel;
        }

        private static Point FindLocation(Control ctrl)
        {
            Point p;
            for (p = ctrl.Location; ctrl.Parent != null; ctrl = ctrl.Parent)
                p.Offset(ctrl.Parent.Location);
            return p;
        }

        private bool camClick(int button)
        {
            bool canClick = NotConnectedCameras.Any(x => x.id == button && x.CameraButtonState != CameraButtonGroup.ButtonState.NotConnected);
            if (!canClick) return false;

            var connected = NotConnectedCameras.Where(x => x.CameraButtonState != CameraButtonGroup.ButtonState.NotConnected).ToList();
            connected.ForEach(x => x.CameraButtonIsConnectedAndInactive());
            var newActiveButton = NotConnectedCameras.First(x => x.id == button);
            newActiveButton.CameraButtonIsConnectedAndInactive();
            return true;
        }


        private void cameraSwitch(int button, bool refresh, bool load)
        {
            int camId = CameraRig.idxFromButton(button);

            //ToDo here camButtons.camClick(button) returns false
            if (load || !load && camClick(button))
            {
                if (load || !load && CameraRig.cameraExists(camId))
                {

                    CameraRig.CurrentlyDisplayingCamera = camId;
                    CameraRig.ConnectedCameras[camId].cam.MotionDetector.Reset();

                    cameraWindow.Camera = CameraRig.ConnectedCameras[camId].cam;
                    lblCameraName.SynchronisedInvoke(() => lblCameraName.Visible = config.InfoForProfileWebcam(TebocamState.profileInUse, CameraRig.ConnectedCameras[camId].cameraName).friendlyName.Trim() != string.Empty);
                    lblCameraName.SynchronisedInvoke(() => lblCameraName.Text = CameraRig.ConnectedCameras[camId].friendlyName);
                    config.GetCurrentProfile().selectedCam = CameraRig.ConnectedCameras[camId].cameraName;

                    if (refresh) cameraWindow.Refresh();
                    camButtonSetColours();
                }

            }
        }

        public CameraButtonGroup.ButtonState motionSenseClick(int p_bttn)
        {
            if (NotConnectedCameras.Any(x => x.id == p_bttn && x.CameraButtonState != CameraButtonGroup.ButtonState.NotConnected))
            {
                if (NotConnectedCameras.Any(x => x.id == p_bttn && x.ActiveButtonState == CameraButtonGroup.ButtonState.NotConnected))
                {
                    return CameraButtonGroup.ButtonState.NotConnected;
                }
                else
                {
                    return CameraButtonGroup.ButtonState.ConnectedAndActive;
                }
            }
            return CameraButtonGroup.ButtonState.ConnectedAndInactive;
        }

        private void selcam(int button, bool activateDetection)
        {
            int cam = CameraRig.idxFromButton(button);
            CameraButtonGroup.ButtonState activeButtonState = motionSenseClick(button);

            if (activateDetection ||
                (activeButtonState == CameraButtonGroup.ButtonState.NotConnected || activeButtonState == CameraButtonGroup.ButtonState.ConnectedAndInactive))
            {

                licence.selectCam(cam + 1);
                NotConnectedCameras.First(x => x.id == button).ActiveButtonIsActive();
                CameraRig.ConnectedCameras[cam].cam.alarmActive = true;
                config.InfoForProfileWebcam(TebocamState.profileInUse, CameraRig.ConnectedCameras[cam].cameraName).alarmActive = true;
                CameraRig.ConnectedCameras[cam].cam.detectionOn = true;
                camButtonSetColours();
                return;
            }

            if (activeButtonState == CameraButtonGroup.ButtonState.ConnectedAndActive)
            {
                licence.deselectCam(cam + 1);
                NotConnectedCameras.First(x => x.id == button).ActiveButtonIsInactive();
                CameraRig.ConnectedCameras[cam].cam.alarmActive = false;
                config.InfoForProfileWebcam(TebocamState.profileInUse, CameraRig.ConnectedCameras[cam].cameraName).alarmActive = false;
                CameraRig.ConnectedCameras[cam].cam.detectionOn = false;
                camButtonSetColours();
                return;
            }
            camButtonSetColours();
        }

        private void publishRefresh(int button)
        {
            int pubButton = CameraRig.idxFromButton(button);
            var record = config.InfoForProfileWebcam(TebocamState.profileInUse, CameraRig.ConnectedCameras[pubButton].cameraName);
            publishSettings.SetPubTime(record.pubTime.ToString());
            publishSettings.SetPubHours(record.pubHours);
            publishSettings.SetPubMins(record.pubMins);
            publishSettings.SetPubSecs(record.pubSecs);
            publishSettings.SetPubToWeb(record.publishWeb);
            publishSettings.SetPubToLocal(record.publishLocal);
            publishSettings.SetPubTimerOn(record.timerOn);
        }

        private void pubcam(int button)
        {
            if (NotConnectedCameras.Where(x => x.id == button && x.CameraButtonState != CameraButtonGroup.ButtonState.NotConnected).Count() > 0)
            {
                int cam = CameraRig.idxFromButton(button);
                PublishButtonGroupInstance.ForEach(x => x.CameraButtonIsNotConnected());
                PublishButtonGroupInstance.Where(x => x.id == button).First().CameraButtonIsActive();

                foreach (var item in PublishButtonGroupInstance)
                {
                    if (item.id == button)
                    {
                        item.CameraButtonIsActive();
                    }
                }

                foreach (ConnectedCamera item in CameraRig.ConnectedCameras)
                {
                    if (item.displayButton != button)
                    {
                        item.cam.publishActive = false;
                        config.InfoForProfileWebcam(TebocamState.profileInUse, item.cameraName).publishActive = false;
                    }
                }

                bool currentlyPublishing = PublishButtonGroupInstance.Any(x => x.id == button && x.CameraButtonState == CameraButtonGroup.ButtonState.ConnectedAndActive);

                if (!currentlyPublishing)
                {
                    PublishButtonGroupInstance.First(x => x.id == button && x.CameraButtonState == CameraButtonGroup.ButtonState.ConnectedAndActive).CameraButtonIsConnectedAndInactive();
                    CameraRig.ConnectedCameras[cam].cam.publishActive = false;
                    config.InfoForProfileWebcam(TebocamState.profileInUse, CameraRig.ConnectedCameras[cam].cameraName).publishActive = false;
                }
                else
                {
                    PublishButtonGroupInstance.First(x => x.id == button && x.CameraButtonState == CameraButtonGroup.ButtonState.ConnectedAndActive).CameraButtonIsActive();
                    CameraRig.ConnectedCameras[cam].cam.publishActive = true;
                    config.InfoForProfileWebcam(TebocamState.profileInUse, CameraRig.ConnectedCameras[cam].cameraName).publishActive = true;
                }

                camButtonSetColours();
                publishRefresh(button);
            }
        }

        private void camButtonSetColours()
        {
            foreach (var buttonGroup in NotConnectedCameras)
            {
                //display camera buttons
                if (buttonGroup.id == CameraRig.ConnectedCameras[CameraRig.CurrentlyDisplayingCamera].displayButton)
                {
                    buttonGroup.CameraButtonIsActive();
                }
                else
                {
                    if (CameraRig.CameraIsConnectedToButton(buttonGroup.id))
                    {
                        buttonGroup.CameraButtonIsConnectedAndInactive();
                    }
                    else
                    {
                        buttonGroup.CameraButtonIsNotConnected();
                    }
                }

                //activate motion detection camera buttons
                var detectionOn = CameraRig.ConnectedCameras.Any(x => x.displayButton == buttonGroup.id && x.cam.alarmActive);
                if (detectionOn)
                {
                    buttonGroup.ActiveButtonIsActive();
                }
                else
                {
                    buttonGroup.ActiveButtonIsInactive();
                }
            }
        }

        private void camReset()
        {
            NotConnectedCameras.ForEach(x => x.CameraButtonIsNotConnected());
        }

        private void bttnCamProp_Click(object sender, EventArgs e)
        {
            VideoCaptureDevice localSource = new VideoCaptureDevice(CameraRig.ConnectedCameras[CameraRig.CurrentlyDisplayingCamera].cameraName);
            localSource.DisplayPropertyPage(IntPtr.Zero); // non-modal
        }

        private void button23_Click_1(object sender, EventArgs e)
        {
            ArrayList i = new ArrayList();
            i.Add(config.GetCurrentProfile().toolTips);
            i.Add(CameraRig.CurrentlyDisplayingCamera);
            i.Add(panel1.AutoScroll);
            //i.Add(camButtons.buttons());
            Movement.motionLevelChanged -= new EventHandler(drawLevel);
            LevelControlBox.levelDraw(0);
            webcamConfig webcamConfig = new webcamConfig(new formDelegate(webcamConfigCompleted),
                                                         i,
                                                         NotConnectedCameras,
                                                         saveChanges,
                                                         TebocamState.tebowebException,
                                                         publisher,
                                                         pinger);
            webcamConfig.StartPosition = FormStartPosition.CenterScreen;
            webcamConfig.ShowDialog();
        }

        private void webcamConfigCompleted(ArrayList i)
        {
            Movement.motionLevelChanged -= new EventHandler(drawLevel);
            Movement.motionLevelChanged += new EventHandler(drawLevel);

            if (CameraRig.cameraCount() > 0)
            {
                //give the interface some time to refresh
                Thread.Sleep(250);
                //give the interface some time to refresh
                cameraSwitch(CameraRig.ConnectedCameras[CameraRig.ConfigCam].displayButton, true, true);
            }

            panel1.AutoScroll = (bool)i[1];
            i.Clear();
            Movement.motionLevelChanged -= new EventHandler(drawLevel);
            Movement.motionLevelChanged += new EventHandler(drawLevel);
            camButtonSetColours();
        }

        public void cameraNewProfile()
        {
            closeAllCameras();
            CameraRig.clear();
            camReset();

            //check if cw is null as we may currently be loading the form 
            //and cw may be in progress
            if (config.GetCurrentProfile().webcam != null && cw == null)
            {
                BackgroundWorker profChWorker = new BackgroundWorker();
                profChWorker.DoWork -= new DoWorkEventHandler(waitForCam);
                profChWorker.DoWork += new DoWorkEventHandler(waitForCam);
                profChWorker.WorkerSupportsCancellation = true;
                profChWorker.RunWorkerAsync();
                profChWorker = null;
            }
        }

        private void infoMode_CheckedChanged(object sender, EventArgs e)
        {
            teboDebug.debugOn = infoMode.Checked;
        }

        private void bttnSetPrefixPublish_Click(object sender, EventArgs e)
        {

        }

        private void filePrefixSet(FilePrefixSettingsResultDto result)
        {
            if (new List<string>() { "Publish Web", "Publish Local" }.Contains(result.FromString))
            {
                int pubButton = CameraRig.idxFromButton(PublishButtonGroupInstance.First(x => x.CameraButtonState == CameraButtonGroup.ButtonState.ConnectedAndActive).id);
                config.InfoForProfileWebcam(TebocamState.profileInUse, CameraRig.ConnectedCameras[pubButton].cameraName).publishFirst = true;

                if (result.FromString == "Publish Web")
                {
                    var record = config.InfoForProfileWebcam(TebocamState.profileInUse, CameraRig.ConnectedCameras[pubButton].cameraName);
                    record.filenamePrefixPubWeb = result.FilenamePrefix;
                    record.cycleStampCheckedPubWeb = result.CycleStamp;
                    record.startCyclePubWeb = Convert.ToInt32(result.StartCycle);
                    record.endCyclePubWeb = Convert.ToInt32(result.EndCycle);
                    record.currentCyclePubWeb = Convert.ToInt32(result.CurrentCycle);
                    record.publishFirst = result.AppendToFilename;
                }

                if (result.FromString == "Publish Local")
                {
                    var record = config.InfoForProfileWebcam(TebocamState.profileInUse, CameraRig.ConnectedCameras[pubButton].cameraName);
                    record.filenamePrefixPubLoc = result.FilenamePrefix;
                    record.cycleStampCheckedPubLoc = result.CycleStamp;
                    record.startCyclePubLoc = Convert.ToInt32(result.StartCycle);
                    record.endCyclePubLoc = Convert.ToInt32(result.EndCycle);
                    record.currentCyclePubLoc = Convert.ToInt32(result.CurrentCycle);
                    record.stampAppendPubLoc = result.AppendToFilename;
                    record.fileDirPubLoc = result.FileLoc;
                    record.fileDirPubCust = result.CustomLocation;
                }
            }

            if (result.FromString == "Alert")
            {
                var record = config.GetCurrentProfile();
                record.filenamePrefix = result.FilenamePrefix;
                record.cycleStampChecked = result.CycleStamp;
                record.startCycle = Convert.ToInt32(result.StartCycle);
                record.endCycle = Convert.ToInt32(result.EndCycle);
                record.currentCycle = Convert.ToInt32(result.CurrentCycle);
                lblImgPref.Text = "Image Prefix: " + result.FilenamePrefix + "   e.g " + result.FilenamePrefix + "1" + TebocamState.ImgSuffix;
            }
        }

        private void button36_Click(object sender, EventArgs e)
        {

        }

        private void button35_Click(object sender, EventArgs e)
        {

        }

        private void button37_Click(object sender, EventArgs e)
        {

        }

        private void button38_Click(object sender, EventArgs e)
        {
            ArrayList i = new ArrayList();
            i.Add("Alert");
            i.Add(config.GetCurrentProfile().toolTips);
            i.Add(config.GetCurrentProfile().timerStartMov);
            i.Add(config.GetCurrentProfile().timerEndMov);
            schedule schedule = new schedule(new formDelegate(scheduleSet), i);
            schedule.StartPosition = FormStartPosition.CenterScreen;
            schedule.ShowDialog();
        }

        private void scheduleSet(ArrayList i)
        {

            if (i[0].ToString() == "Publish")
            {
                config.GetCurrentProfile().timerStartPub = i[1].ToString();
                config.GetCurrentProfile().timerEndPub = i[2].ToString();
                publishSettings.SetLblstartpub("Scheduled start: " + LeftRightMid.Left(i[1].ToString(), 2) + ":" + LeftRightMid.Right(i[1].ToString(), 2));
                publishSettings.SetLblendpub("Scheduled end: " + LeftRightMid.Left(i[2].ToString(), 2) + ":" + LeftRightMid.Right(i[2].ToString(), 2));
                Invalidate();
            }

            if (i[0].ToString() == "Alert")
            {
                config.GetCurrentProfile().timerStartMov = i[1].ToString();
                config.GetCurrentProfile().timerEndMov = i[2].ToString();
                lblstartmov.Text = "Start: " + LeftRightMid.Left(i[1].ToString(), 2) + ":" + LeftRightMid.Right(i[1].ToString(), 2);
                lblendmov.Text = "End: " + LeftRightMid.Left(i[2].ToString(), 2) + ":" + LeftRightMid.Right(i[2].ToString(), 2);
                Invalidate();
            }
        }

        private void bttnUpdateFooter_Click(object sender, EventArgs e)
        {
            bttInstallUpdateAdmin_Click(null, null);
        }

        private void bttInstallUpdateAdmin_Click(object sender, EventArgs e)
        {
            updaterInstall = true;
            keepWorking = false;
            SetAPiInstanceToOff();
        }

        private void disCommOnlineSecs_Leave(object sender, EventArgs e)
        {
            disCommOnlineSecs.Text = Valid.verifyInt(disCommOnlineSecs.Text, 1, 86400, "1");
            config.GetCurrentProfile().disCommOnlineSecs = Convert.ToInt32(disCommOnlineSecs.Text);
        }

        private void disCommOnline_CheckedChanged(object sender, EventArgs e)
        {
            disCommOnlineSecs.Enabled = disCommOnline.Checked;
            config.GetCurrentProfile().disCommOnline = disCommOnline.Checked;
        }

        private void txtLockdownPassword_Leave(object sender, EventArgs e)
        {
            config.GetCurrentProfile().lockdownPassword = txtLockdownPassword.Text;
        }

        private void rdLockdownOff_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().lockdownOn = !rdLockdownOff.Checked;
            lockdown = !rdLockdownOff.Checked;
            btnSecurityLockdownOn.Enabled = !rdLockdownOff.Checked;
        }

        private void btnSecurityLockdownOn_Click(object sender, EventArgs e)
        {
            MinimiseTebocam(false);
            this.Enabled = false;

            while (1 == 1)
            {

                if (Prompt.ShowDialog("Password", "Enter password to unlock") == config.GetCurrentProfile().lockdownPassword)
                {

                    this.Enabled = true;
                    break;

                }
            }
        }

        private void numFrameRateCalcOver_Leave(object sender, EventArgs e)
        {
            config.GetCurrentProfile().framesSecsToCalcOver = (int)numFrameRateCalcOver.Value;
        }

        private void chkFrameRateTrack_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().framerateTrack = chkFrameRateTrack.Checked;
            CameraRig.ConnectedCameras.ForEach(x => x.cam.frameRateTrack = chkFrameRateTrack.Checked);
        }

        private void button3_Click(object sender, EventArgs e)
        {
            List<Camera> cameras = new List<Camera>();
            CameraRig.ConnectedCameras.ForEach(x => cameras.Add(x.cam));
            ControlRoomCntl controlRoom = new ControlRoomCntl(cameras, pinger);
            Form controlRoomForm = new Form();
            controlRoomForm.FormBorderStyle = FormBorderStyle.FixedSingle;
            controlRoomForm.MinimizeBox = false;
            controlRoomForm.MaximizeBox = false;
            controlRoomForm.Size = new Size(controlRoom.Width + 10, controlRoom.Height + 30);
            controlRoomForm.Controls.Add(controlRoom);
            controlRoomForm.ShowDialog();
        }

        public void AdminControl()
        {
            if (!devMachine) return;
            var adm = new AdminCntl(this);
            Form frm = new Form();
            frm.Controls.Add(adm);
            frm.Width = adm.Width + 50;
            frm.Height = adm.Height + 50;
            frm.FormBorderStyle = FormBorderStyle.FixedSingle;
            frm.Show();
        }

        private void chkHideWhenMinimised_CheckedChanged(object sender, EventArgs e)
        {
            config.GetCurrentProfile().hideWhenMinimized = chkHideWhenMinimised.Checked;
        }

        private void btnMotionImage_Click(object sender, EventArgs e)
        {
            cameraWindow.MotionDisplay = !cameraWindow.MotionDisplay;
        }

        private void btnTestAccessCameras_Click(object sender, EventArgs e)
        {
            var test = CameraRig.ConnectedCameras;
        }

        private void btnCamInfo_Click(object sender, EventArgs e)
        {
            int camId = CameraRig.CurrentlyDisplayingCamera;
            Camera cam = CameraRig.ConnectedCameras[camId].cam;
            List<string> info = new List<string>() {string.Format("cam.alarmActive: {0}", cam.alarmActive),
                                                    string.Format("cam.alert: {0}", cam.alert),
                                                    string.Format("cam.detectionOn: {0}", cam.detectionOn),
                                                    string.Format("cam.movementVal: {0}", cam.movementVal)};
            LogInformatioRequest(string.Format("cam: {0}", camId), info);
        }

        private void LogInformatioRequest(string area, List<string> info)
        {
            TebocamState.log.AddLine(string.Format("******{0}******info request", area));
            foreach (var inf in info)
            {
                TebocamState.log.AddLine(inf);
            }
            TebocamState.log.AddLine(string.Format("******{0}******info request", area));
        }

        private void txtLog_DoubleClick(object sender, EventArgs e)
        {
            Form frm = new Form();
            frm.Width = 400;
            frm.Height = 400;
            frm.FormBorderStyle = FormBorderStyle.FixedSingle;
            var logTxt = new RichTextBox();
            logTxt.BackColor = Color.LemonChiffon;
            logTxt.ScrollBars = RichTextBoxScrollBars.Both;
            logTxt.Dock = DockStyle.Fill;
            frm.Controls.Add(logTxt);
            logTxt.Text = txtLog.Text;
            log.LogAdded += new EventHandler(delegate (Object o, EventArgs a) { txtLog.SynchronisedInvoke(() => logTxt.Text = string.Format("{0} [{1}]", TebocamState.log.Lines.Last().Message, TebocamState.log.Lines.Last().DT.ToString("yyyy/MM/dd-HH:mm:ss:fff", System.Globalization.CultureInfo.InvariantCulture)) + "\n" + logTxt.Text); });
            frm.Show();
        }
    }

    public class ListArgs : EventArgs
    {
        public List<object> _list;

        public List<object> list
        {
            get { return _list; }
            set { _list = value; }
        }
    }

    class scheduleClass
    {
        public enum scheduleAction
        {
            no_action,
            start,
            end
        };
    }
}
